(()=>{"use strict";var e={752:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.App=void 0;var n=function(){function e(e){this.env=e,this.env.drawLoadingScreen(this)}return e.prototype.start=function(e){this.map=e,this.env.drawMap(this)},e.prototype.getMapData=function(){if(null==this.map)throw new Error("Corrupt map data from remote server, server response OK");return this.map},e}();t.App=n},550:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.peaks=t.highlands=t.hills=t.lowlands=t.coastal=t.shallowSea=t.deepSea=t.steepCliff=t.cliff=t.errorPink=void 0,t.errorPink=[255,0,255,255],t.cliff=[104,103,93,255],t.steepCliff=[94,93,83,255],t.deepSea=[29,162,216,255],t.shallowSea=[127,205,255,255],t.coastal=[255,255,204,255],t.lowlands=[90,67,49,255],t.hills=[99,73,55,255],t.highlands=[107,88,73,255],t.peaks=[114,113,103,255]},824:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Environment=void 0;var n=function(){function e(e,t){this.width=e,this.height=t}return e.prototype.drawMap=function(e){},e.prototype.drawLoadingScreen=function(e){},e}();t.Environment=n},822:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.WebEnvironment=void 0;var i=n(550),s=n(824),a=n(798),c=n(83),u=function(e){function t(t,n){var r,o=this;if(t.length<1)throw new Error("ID of HTML element to append to is empty "+t);if(!(r=document.getElementById(t)))throw new Error("Unable to find content area by ID: "+t);n=null!=n?n:["app"],(o=e.call(this,r.offsetWidth,r.offsetHeight)||this).stage=new Array(Math.min(n.length,12));for(var i=0;i<o.stage.length;i++)o.stage[i]=o.createCanvas(r,n[i]);var s=o;return o.stage[o.stage.length-1].element.addEventListener("mouseup",(function(e){s.mouseClickEvent(e)})),o}return o(t,e),t.prototype.createCanvas=function(e,t){var n,r;if(!(n=document.createElement("canvas")))throw new Error("Unable to create canvas: "+t);if(n.className=t,n.width=e.offsetWidth,n.height=e.offsetHeight,e.append(n),!(r=n.getContext("2d")))throw new Error("2d context not supported or canvas already initialized "+t);return{element:n,context:r}},t.prototype.drawMap=function(e){this.drawMapLayer(e,this.stage[0].context),this.drawUI(e,this.stage[2].context)},t.prototype.drawMapLayer=function(e,t,n,r){var o;n=null!=n?n:0,r=null!=r?r:0;for(var s=e.getMapData(),u=Math.min(e.env.width,s.width),l=Math.min(e.env.height,s.height),f=t.getImageData(0,0,u,l),h=0;h<u;h++)for(var d=function(){var e=4*(h+m*u),t=s.mapPoints[n+h][r+m],l=(0,c.normalizeValue)(t.height,s.minHeight,s.maxHeight),d=a.heightColorMap.find((function(e){return l>=e.heightRange[0]&&l<e.heightRange[1]})),g=d?d.color:i.errorPink,y=null!==(o=t.steepness)&&void 0!==o?o:0;y>=.025&&!t.isWater&&(g=i.cliff,y>.03&&(g=i.steepCliff)),p.setColor(f,e,g)},p=this,m=0;m<l;m++)d();t.putImageData(f,0,0)},t.prototype.drawUI=function(e,t){t.beginPath();var n=this.width-125,r=this.height-100;t.moveTo(n,r),t.lineTo(n+100,r+75),t.lineTo(+n+100,r+25),t.fill()},t.prototype.setColor=function(e,t,n){e.data[t]=n[0],e.data[t+1]=n[1],e.data[t+2]=n[2],e.data[t+3]=n[3]},t.prototype.getMousePosition=function(e){var t=this.stage[0].element.getBoundingClientRect(),n=this.stage[0].element.width/t.width,r=this.stage[0].element.height/t.height;return{x:(e.clientX-t.left)*n,y:(e.clientY-t.top)*r}},t.prototype.mouseClickEvent=function(e){this.getMousePosition(e)},t.prototype.drawLoadingScreen=function(e){this.stage[0].context.font="4em sans-serif",this.stage[0].context.fillText("Loading...",this.width/3,this.height/3)},t}(s.Environment);t.WebEnvironment=u},798:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.heightColorMap=void 0;var r=n(550);t.heightColorMap=[{heightRange:[-1/0,.03],color:r.deepSea,label:"deep water"},{heightRange:[.03,.1],color:r.shallowSea,label:"water"},{heightRange:[.1,.12],color:r.coastal,label:"coastal"},{heightRange:[.12,.3],color:r.lowlands,label:"lowlands"},{heightRange:[.3,.52],color:r.hills,label:"hills"},{heightRange:[.52,.61],color:r.highlands,label:"highlands"},{heightRange:[.61,1/0],color:r.peaks,label:"mountains"}]},607:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(s=0)),s;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,r=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s,a=i(n(218)),c=n(752),u=n(822);s=new c.App(new u.WebEnvironment("main",["app","overlay","ui"])),function(){r(this,void 0,void 0,(function(){return o(this,(function(e){return a.default.post("http://localhost:3000/getMap",{responseType:"arraybuffer",decompress:"true"}).then((function(e){return r(this,void 0,void 0,(function(){var t;return o(this,(function(n){return t=e.data,s.start(t),[2]}))}))})).catch((function(e){console.log(e)})),[2]}))}))}()},83:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.normalizeValue=void 0,t.normalizeValue=function(e,t,n){return(e-t)/(n-t)}},218:(e,t,n)=>{function r(e,t){return function(){return e.apply(t,arguments)}}const{toString:o}=Object.prototype,{getPrototypeOf:i}=Object,s=(a=Object.create(null),e=>{const t=o.call(e);return a[t]||(a[t]=t.slice(8,-1).toLowerCase())});var a;const c=e=>(e=e.toLowerCase(),t=>s(t)===e),u=e=>t=>typeof t===e,{isArray:l}=Array,f=u("undefined"),h=c("ArrayBuffer"),d=u("string"),p=u("function"),m=u("number"),g=e=>null!==e&&"object"==typeof e,y=e=>{if("object"!==s(e))return!1;const t=i(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},b=c("Date"),w=c("File"),E=c("Blob"),v=c("FileList"),O=c("URLSearchParams");function S(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,o;if("object"!=typeof e&&(e=[e]),l(e))for(r=0,o=e.length;r<o;r++)t.call(null,e[r],r,e);else{const o=n?Object.getOwnPropertyNames(e):Object.keys(e),i=o.length;let s;for(r=0;r<i;r++)s=o[r],t.call(null,e[s],s,e)}}function R(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,o=n.length;for(;o-- >0;)if(r=n[o],t===r.toLowerCase())return r;return null}const A="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:n.g,T=e=>!f(e)&&e!==A,x=(_="undefined"!=typeof Uint8Array&&i(Uint8Array),e=>_&&e instanceof _);var _;const C=c("HTMLFormElement"),P=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),j=c("RegExp"),N=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};S(n,((n,o)=>{!1!==t(n,o,e)&&(r[o]=n)})),Object.defineProperties(e,r)},L="abcdefghijklmnopqrstuvwxyz",U="0123456789",D={DIGIT:U,ALPHA:L,ALPHA_DIGIT:L+L.toUpperCase()+U};var B={isArray:l,isArrayBuffer:h,isBuffer:function(e){return null!==e&&!f(e)&&null!==e.constructor&&!f(e.constructor)&&p(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{const t="[object FormData]";return e&&("function"==typeof FormData&&e instanceof FormData||o.call(e)===t||p(e.toString)&&e.toString()===t)},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&h(e.buffer),t},isString:d,isNumber:m,isBoolean:e=>!0===e||!1===e,isObject:g,isPlainObject:y,isUndefined:f,isDate:b,isFile:w,isBlob:E,isRegExp:j,isFunction:p,isStream:e=>g(e)&&p(e.pipe),isURLSearchParams:O,isTypedArray:x,isFileList:v,forEach:S,merge:function e(){const{caseless:t}=T(this)&&this||{},n={},r=(r,o)=>{const i=t&&R(n,o)||o;y(n[i])&&y(r)?n[i]=e(n[i],r):y(r)?n[i]=e({},r):l(r)?n[i]=r.slice():n[i]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&S(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:o}={})=>(S(t,((t,o)=>{n&&p(t)?e[o]=r(t,n):e[o]=t}),{allOwnKeys:o}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let o,s,a;const c={};if(t=t||{},null==e)return t;do{for(o=Object.getOwnPropertyNames(e),s=o.length;s-- >0;)a=o[s],r&&!r(a,e,t)||c[a]||(t[a]=e[a],c[a]=!0);e=!1!==n&&i(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:s,kindOfTest:c,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(l(e))return e;let t=e.length;if(!m(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:C,hasOwnProperty:P,hasOwnProp:P,reduceDescriptors:N,freezeMethods:e=>{N(e,((t,n)=>{if(p(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];p(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return l(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t),findKey:R,global:A,isContextDefined:T,ALPHABET:D,generateString:(e=16,t=D.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&p(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(g(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const o=l(e)?[]:{};return S(e,((e,t)=>{const i=n(e,r+1);!f(i)&&(o[t]=i)})),t[r]=void 0,o}}return e};return n(e,0)}};function F(e,t,n,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}B.inherits(F,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:B.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const k=F.prototype,M={};function I(e){return B.isPlainObject(e)||B.isArray(e)}function q(e){return B.endsWith(e,"[]")?e.slice(0,-2):e}function z(e,t,n){return e?e.concat(t).map((function(e,t){return e=q(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{M[e]={value:e}})),Object.defineProperties(F,M),Object.defineProperty(k,"isAxiosError",{value:!0}),F.from=(e,t,n,r,o,i)=>{const s=Object.create(k);return B.toFlatObject(e,s,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),F.call(s,e.message,t,n,r,o),s.cause=e,s.name=e.name,i&&Object.assign(s,i),s};const H=B.toFlatObject(B,{},null,(function(e){return/^is[A-Z]/.test(e)}));function W(e,t,n){if(!B.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=B.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!B.isUndefined(t[e])}))).metaTokens,o=n.visitor||u,i=n.dots,s=n.indexes,a=(n.Blob||"undefined"!=typeof Blob&&Blob)&&B.isSpecCompliantForm(t);if(!B.isFunction(o))throw new TypeError("visitor must be a function");function c(e){if(null===e)return"";if(B.isDate(e))return e.toISOString();if(!a&&B.isBlob(e))throw new F("Blob is not supported. Use a Buffer instead.");return B.isArrayBuffer(e)||B.isTypedArray(e)?a&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function u(e,n,o){let a=e;if(e&&!o&&"object"==typeof e)if(B.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(B.isArray(e)&&function(e){return B.isArray(e)&&!e.some(I)}(e)||(B.isFileList(e)||B.endsWith(n,"[]"))&&(a=B.toArray(e)))return n=q(n),a.forEach((function(e,r){!B.isUndefined(e)&&null!==e&&t.append(!0===s?z([n],r,i):null===s?n:n+"[]",c(e))})),!1;return!!I(e)||(t.append(z(o,n,i),c(e)),!1)}const l=[],f=Object.assign(H,{defaultVisitor:u,convertValue:c,isVisitable:I});if(!B.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!B.isUndefined(n)){if(-1!==l.indexOf(n))throw Error("Circular reference detected in "+r.join("."));l.push(n),B.forEach(n,(function(n,i){!0===(!(B.isUndefined(n)||null===n)&&o.call(t,n,B.isString(i)?i.trim():i,r,f))&&e(n,r?r.concat(i):[i])})),l.pop()}}(e),t}function J(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function V(e,t){this._pairs=[],e&&W(e,this,t)}const K=V.prototype;function G(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function $(e,t,n){if(!t)return e;const r=n&&n.encode||G,o=n&&n.serialize;let i;if(i=o?o(t,n):B.isURLSearchParams(t)?t.toString():new V(t,n).toString(r),i){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}K.append=function(e,t){this._pairs.push([e,t])},K.toString=function(e){const t=e?function(t){return e.call(this,t,J)}:J;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};var X=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){B.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},Q={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Y={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:V,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},isStandardBrowserEnv:(()=>{let e;return("undefined"==typeof navigator||"ReactNative"!==(e=navigator.product)&&"NativeScript"!==e&&"NS"!==e)&&"undefined"!=typeof window&&"undefined"!=typeof document})(),isStandardBrowserWebWorkerEnv:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,protocols:["http","https","file","blob","url","data"]};function Z(e){function t(e,n,r,o){let i=e[o++];const s=Number.isFinite(+i),a=o>=e.length;return i=!i&&B.isArray(r)?r.length:i,a?(B.hasOwnProp(r,i)?r[i]=[r[i],n]:r[i]=n,!s):(r[i]&&B.isObject(r[i])||(r[i]=[]),t(e,n,r[i],o)&&B.isArray(r[i])&&(r[i]=function(e){const t={},n=Object.keys(e);let r;const o=n.length;let i;for(r=0;r<o;r++)i=n[r],t[i]=e[i];return t}(r[i])),!s)}if(B.isFormData(e)&&B.isFunction(e.entries)){const n={};return B.forEachEntry(e,((e,r)=>{t(function(e){return B.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null}const ee={"Content-Type":void 0},te={transitional:Q,adapter:["xhr","http"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,o=B.isObject(e);if(o&&B.isHTMLForm(e)&&(e=new FormData(e)),B.isFormData(e))return r&&r?JSON.stringify(Z(e)):e;if(B.isArrayBuffer(e)||B.isBuffer(e)||B.isStream(e)||B.isFile(e)||B.isBlob(e))return e;if(B.isArrayBufferView(e))return e.buffer;if(B.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let i;if(o){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return W(e,new Y.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return Y.isNode&&B.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((i=B.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return W(i?{"files[]":e}:e,t&&new t,this.formSerializer)}}return o||r?(t.setContentType("application/json",!1),function(e,t,n){if(B.isString(e))try{return(0,JSON.parse)(e),B.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||te.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(e&&B.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw F.from(e,F.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Y.classes.FormData,Blob:Y.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};B.forEach(["delete","get","head"],(function(e){te.headers[e]={}})),B.forEach(["post","put","patch"],(function(e){te.headers[e]=B.merge(ee)}));var ne=te;const re=B.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),oe=Symbol("internals");function ie(e){return e&&String(e).trim().toLowerCase()}function se(e){return!1===e||null==e?e:B.isArray(e)?e.map(se):String(e)}function ae(e,t,n,r,o){return B.isFunction(r)?r.call(this,t,n):(o&&(t=n),B.isString(t)?B.isString(r)?-1!==t.indexOf(r):B.isRegExp(r)?r.test(t):void 0:void 0)}class ce{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function o(e,t,n){const o=ie(t);if(!o)throw new Error("header name must be a non-empty string");const i=B.findKey(r,o);(!i||void 0===r[i]||!0===n||void 0===n&&!1!==r[i])&&(r[i||t]=se(e))}const i=(e,t)=>B.forEach(e,((e,n)=>o(e,n,t)));return B.isPlainObject(e)||e instanceof this.constructor?i(e,t):B.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z]+$/.test(e.trim())?i((e=>{const t={};let n,r,o;return e&&e.split("\n").forEach((function(e){o=e.indexOf(":"),n=e.substring(0,o).trim().toLowerCase(),r=e.substring(o+1).trim(),!n||t[n]&&re[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t):null!=e&&o(t,e,n),this}get(e,t){if(e=ie(e)){const n=B.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(B.isFunction(t))return t.call(this,e,n);if(B.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=ie(e)){const n=B.findKey(this,e);return!(!n||void 0===this[n]||t&&!ae(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function o(e){if(e=ie(e)){const o=B.findKey(n,e);!o||t&&!ae(0,n[o],o,t)||(delete n[o],r=!0)}}return B.isArray(e)?e.forEach(o):o(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const o=t[n];e&&!ae(0,this[o],o,e,!0)||(delete this[o],r=!0)}return r}normalize(e){const t=this,n={};return B.forEach(this,((r,o)=>{const i=B.findKey(n,o);if(i)return t[i]=se(r),void delete t[o];const s=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(o):String(o).trim();s!==o&&delete t[o],t[s]=se(r),n[s]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return B.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&B.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[oe]=this[oe]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=ie(e);t[r]||(function(e,t){const n=B.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,o){return this[r].call(this,t,e,n,o)},configurable:!0})}))}(n,e),t[r]=!0)}return B.isArray(e)?e.forEach(r):r(e),this}}ce.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),B.freezeMethods(ce.prototype),B.freezeMethods(ce);var ue=ce;function le(e,t){const n=this||ne,r=t||n,o=ue.from(r.headers);let i=r.data;return B.forEach(e,(function(e){i=e.call(n,i,o.normalize(),t?t.status:void 0)})),o.normalize(),i}function fe(e){return!(!e||!e.__CANCEL__)}function he(e,t,n){F.call(this,null==e?"canceled":e,F.ERR_CANCELED,t,n),this.name="CanceledError"}B.inherits(he,F,{__CANCEL__:!0});var de=Y.isStandardBrowserEnv?{write:function(e,t,n,r,o,i){const s=[];s.push(e+"="+encodeURIComponent(t)),B.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),B.isString(r)&&s.push("path="+r),B.isString(o)&&s.push("domain="+o),!0===i&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}};function pe(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}var me=Y.isStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=B.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0};function ge(e,t){let n=0;const r=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let o,i=0,s=0;return t=void 0!==t?t:1e3,function(a){const c=Date.now(),u=r[s];o||(o=c),n[i]=a,r[i]=c;let l=s,f=0;for(;l!==i;)f+=n[l++],l%=e;if(i=(i+1)%e,i===s&&(s=(s+1)%e),c-o<t)return;const h=u&&c-u;return h?Math.round(1e3*f/h):void 0}}(50,250);return o=>{const i=o.loaded,s=o.lengthComputable?o.total:void 0,a=i-n,c=r(a);n=i;const u={loaded:i,total:s,progress:s?i/s:void 0,bytes:a,rate:c||void 0,estimated:c&&s&&i<=s?(s-i)/c:void 0,event:o};u[t?"download":"upload"]=!0,e(u)}}const ye={http:null,xhr:"undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){let r=e.data;const o=ue.from(e.headers).normalize(),i=e.responseType;let s;function a(){e.cancelToken&&e.cancelToken.unsubscribe(s),e.signal&&e.signal.removeEventListener("abort",s)}B.isFormData(r)&&(Y.isStandardBrowserEnv||Y.isStandardBrowserWebWorkerEnv)&&o.setContentType(!1);let c=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",n=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.set("Authorization","Basic "+btoa(t+":"+n))}const u=pe(e.baseURL,e.url);function l(){if(!c)return;const r=ue.from("getAllResponseHeaders"in c&&c.getAllResponseHeaders());!function(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new F("Request failed with status code "+n.status,[F.ERR_BAD_REQUEST,F.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}((function(e){t(e),a()}),(function(e){n(e),a()}),{data:i&&"text"!==i&&"json"!==i?c.response:c.responseText,status:c.status,statusText:c.statusText,headers:r,config:e,request:c}),c=null}if(c.open(e.method.toUpperCase(),$(u,e.params,e.paramsSerializer),!0),c.timeout=e.timeout,"onloadend"in c?c.onloadend=l:c.onreadystatechange=function(){c&&4===c.readyState&&(0!==c.status||c.responseURL&&0===c.responseURL.indexOf("file:"))&&setTimeout(l)},c.onabort=function(){c&&(n(new F("Request aborted",F.ECONNABORTED,e,c)),c=null)},c.onerror=function(){n(new F("Network Error",F.ERR_NETWORK,e,c)),c=null},c.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const r=e.transitional||Q;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new F(t,r.clarifyTimeoutError?F.ETIMEDOUT:F.ECONNABORTED,e,c)),c=null},Y.isStandardBrowserEnv){const t=(e.withCredentials||me(u))&&e.xsrfCookieName&&de.read(e.xsrfCookieName);t&&o.set(e.xsrfHeaderName,t)}void 0===r&&o.setContentType(null),"setRequestHeader"in c&&B.forEach(o.toJSON(),(function(e,t){c.setRequestHeader(t,e)})),B.isUndefined(e.withCredentials)||(c.withCredentials=!!e.withCredentials),i&&"json"!==i&&(c.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&c.addEventListener("progress",ge(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&c.upload&&c.upload.addEventListener("progress",ge(e.onUploadProgress)),(e.cancelToken||e.signal)&&(s=t=>{c&&(n(!t||t.type?new he(null,e,c):t),c.abort(),c=null)},e.cancelToken&&e.cancelToken.subscribe(s),e.signal&&(e.signal.aborted?s():e.signal.addEventListener("abort",s)));const f=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(u);f&&-1===Y.protocols.indexOf(f)?n(new F("Unsupported protocol "+f+":",F.ERR_BAD_REQUEST,e)):c.send(r||null)}))}};B.forEach(ye,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));var be={getAdapter:e=>{e=B.isArray(e)?e:[e];const{length:t}=e;let n,r;for(let o=0;o<t&&(n=e[o],!(r=B.isString(n)?ye[n.toLowerCase()]:n));o++);if(!r){if(!1===r)throw new F(`Adapter ${n} is not supported by the environment`,"ERR_NOT_SUPPORT");throw new Error(B.hasOwnProp(ye,n)?`Adapter '${n}' is not available in the build`:`Unknown adapter '${n}'`)}if(!B.isFunction(r))throw new TypeError("adapter is not a function");return r},adapters:ye};function we(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new he(null,e)}function Ee(e){return we(e),e.headers=ue.from(e.headers),e.data=le.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),be.getAdapter(e.adapter||ne.adapter)(e).then((function(t){return we(e),t.data=le.call(e,e.transformResponse,t),t.headers=ue.from(t.headers),t}),(function(t){return fe(t)||(we(e),t&&t.response&&(t.response.data=le.call(e,e.transformResponse,t.response),t.response.headers=ue.from(t.response.headers))),Promise.reject(t)}))}const ve=e=>e instanceof ue?e.toJSON():e;function Oe(e,t){t=t||{};const n={};function r(e,t,n){return B.isPlainObject(e)&&B.isPlainObject(t)?B.merge.call({caseless:n},e,t):B.isPlainObject(t)?B.merge({},t):B.isArray(t)?t.slice():t}function o(e,t,n){return B.isUndefined(t)?B.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function i(e,t){if(!B.isUndefined(t))return r(void 0,t)}function s(e,t){return B.isUndefined(t)?B.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function a(n,o,i){return i in t?r(n,o):i in e?r(void 0,n):void 0}const c={url:i,method:i,data:i,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,beforeRedirect:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:a,headers:(e,t)=>o(ve(e),ve(t),!0)};return B.forEach(Object.keys(e).concat(Object.keys(t)),(function(r){const i=c[r]||o,s=i(e[r],t[r],r);B.isUndefined(s)&&i!==a||(n[r]=s)})),n}const Se={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{Se[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const Re={};Se.transitional=function(e,t,n){function r(e,t){return"[Axios v1.3.4] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,o,i)=>{if(!1===e)throw new F(r(o," has been removed"+(t?" in "+t:"")),F.ERR_DEPRECATED);return t&&!Re[o]&&(Re[o]=!0,console.warn(r(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,o,i)}};var Ae={assertOptions:function(e,t,n){if("object"!=typeof e)throw new F("options must be an object",F.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let o=r.length;for(;o-- >0;){const i=r[o],s=t[i];if(s){const t=e[i],n=void 0===t||s(t,i,e);if(!0!==n)throw new F("option "+i+" must be "+n,F.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new F("Unknown option "+i,F.ERR_BAD_OPTION)}},validators:Se};const Te=Ae.validators;class xe{constructor(e){this.defaults=e,this.interceptors={request:new X,response:new X}}request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=Oe(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:o}=t;let i;void 0!==n&&Ae.assertOptions(n,{silentJSONParsing:Te.transitional(Te.boolean),forcedJSONParsing:Te.transitional(Te.boolean),clarifyTimeoutError:Te.transitional(Te.boolean)},!1),void 0!==r&&Ae.assertOptions(r,{encode:Te.function,serialize:Te.function},!0),t.method=(t.method||this.defaults.method||"get").toLowerCase(),i=o&&B.merge(o.common,o[t.method]),i&&B.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete o[e]})),t.headers=ue.concat(i,o);const s=[];let a=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(a=a&&e.synchronous,s.unshift(e.fulfilled,e.rejected))}));const c=[];let u;this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)}));let l,f=0;if(!a){const e=[Ee.bind(this),void 0];for(e.unshift.apply(e,s),e.push.apply(e,c),l=e.length,u=Promise.resolve(t);f<l;)u=u.then(e[f++],e[f++]);return u}l=s.length;let h=t;for(f=0;f<l;){const e=s[f++],t=s[f++];try{h=e(h)}catch(e){t.call(this,e);break}}try{u=Ee.call(this,h)}catch(e){return Promise.reject(e)}for(f=0,l=c.length;f<l;)u=u.then(c[f++],c[f++]);return u}getUri(e){return $(pe((e=Oe(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}B.forEach(["delete","get","head","options"],(function(e){xe.prototype[e]=function(t,n){return this.request(Oe(n||{},{method:e,url:t,data:(n||{}).data}))}})),B.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(Oe(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}xe.prototype[e]=t(),xe.prototype[e+"Form"]=t(!0)}));var _e=xe;class Ce{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,o){n.reason||(n.reason=new he(e,r,o),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new Ce((function(t){e=t})),cancel:e}}}var Pe=Ce;const je={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(je).forEach((([e,t])=>{je[t]=e}));var Ne=je;const Le=function e(t){const n=new _e(t),o=r(_e.prototype.request,n);return B.extend(o,_e.prototype,n,{allOwnKeys:!0}),B.extend(o,n,null,{allOwnKeys:!0}),o.create=function(n){return e(Oe(t,n))},o}(ne);Le.Axios=_e,Le.CanceledError=he,Le.CancelToken=Pe,Le.isCancel=fe,Le.VERSION="1.3.4",Le.toFormData=W,Le.AxiosError=F,Le.Cancel=Le.CanceledError,Le.all=function(e){return Promise.all(e)},Le.spread=function(e){return function(t){return e.apply(null,t)}},Le.isAxiosError=function(e){return B.isObject(e)&&!0===e.isAxiosError},Le.mergeConfig=Oe,Le.AxiosHeaders=ue,Le.formToJSON=e=>Z(B.isHTMLForm(e)?new FormData(e):e),Le.HttpStatusCode=Ne,Le.default=Le,e.exports=Le}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q3ZCLE9BQU9sTSxRQUFRaU0sSUFBSUMsRUFDckIsRUFFQVAsR0FBTVEsT0ExSU4sU0FBZ0JDLEdBQ2QsT0FBTyxTQUFjM2UsR0FDbkIsT0FBTzJlLEVBQVM3bEIsTUFBTSxLQUFNa0gsRUFDOUIsQ0FDRixFQXlJQWtlLEdBQU1VLGFBaElOLFNBQXNCQyxHQUNwQixPQUFPemhCLEVBQU0vQyxTQUFTd2tCLEtBQXNDLElBQXpCQSxFQUFRRCxZQUM3QyxFQWlJQVYsR0FBTWpJLFlBQWNBLEdBRXBCaUksR0FBTTlTLGFBQWU0QyxHQUVyQmtRLEdBQU1ZLFdBQWF2bEIsR0FBUzhPLEVBQWVqTCxFQUFNakIsV0FBVzVDLEdBQVMsSUFBSWtFLFNBQVNsRSxHQUFTQSxHQUUzRjJrQixHQUFNakUsZUFBaUJnRSxHQUV2QkMsR0FBTWEsUUFBVWIsR0FFaEJjLEVBQU9DLFFBQVVmLEUsR0NwbkdiZ0IsRUFBMkIsQ0FBQyxFQUdoQyxTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUgsRUFBeUJFLEdBQzVDLFFBQXFCanRCLElBQWpCa3RCLEVBQ0gsT0FBT0EsRUFBYUosUUFHckIsSUFBSUQsRUFBU0UsRUFBeUJFLEdBQVksQ0FHakRILFFBQVMsQ0FBQyxHQU9YLE9BSEFLLEVBQW9CRixHQUFVM2xCLEtBQUt1bEIsRUFBT0MsUUFBU0QsRUFBUUEsRUFBT0MsUUFBU0UsR0FHcEVILEVBQU9DLE9BQ2YsQ0N0QkFFLEVBQW9CcmpCLEVBQUksV0FDdkIsR0FBMEIsaUJBQWZILFdBQXlCLE9BQU9BLFdBQzNDLElBQ0MsT0FBTy9KLE1BQVEsSUFBSTJ0QixTQUFTLGNBQWIsRUFDaEIsQ0FBRSxNQUFPbHJCLEdBQ1IsR0FBc0IsaUJBQVh3SCxPQUFxQixPQUFPQSxNQUN4QyxDQUNBLENBUHVCLEdDR0VzakIsRUFBb0IsSSIsInNvdXJjZXMiOlsid2VicGFjazovL3dvcmxkZ2VuLy4vc3JjL2FwcC50cyIsIndlYnBhY2s6Ly93b3JsZGdlbi8uL3NyYy9jb2xvcnMudHMiLCJ3ZWJwYWNrOi8vd29ybGRnZW4vLi9zcmMvZW52aXJvbm1lbnQudHMiLCJ3ZWJwYWNrOi8vd29ybGRnZW4vLi9zcmMvZW52aXJvbm1lbnRXZWIudHMiLCJ3ZWJwYWNrOi8vd29ybGRnZW4vLi9zcmMvaGVpZ2h0Q29sb3JNYXAudHMiLCJ3ZWJwYWNrOi8vd29ybGRnZW4vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vd29ybGRnZW4vLi9zcmMvbm9ybWFsaXplVmFsdWUudHMiLCJ3ZWJwYWNrOi8vd29ybGRnZW4vLi9ub2RlX21vZHVsZXMvYXhpb3MvZGlzdC9icm93c2VyL2F4aW9zLmNqcyIsIndlYnBhY2s6Ly93b3JsZGdlbi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93b3JsZGdlbi93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3dvcmxkZ2VuL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbnZpcm9ubWVudCB9IGZyb20gXCIuL2Vudmlyb25tZW50XCI7XG5pbXBvcnQgeyBNYXBEYXRhIH0gZnJvbSBcIi4uLy4uL3dndy1ub2RlL3NyYy9tYXBEYXRhXCI7XG5cbmV4cG9ydCBjbGFzcyBBcHAge1xuICAvKipcbiAgICogVmFyaWFibGVzIGhvbGRpbmcgY3VycmVudCBpbnN0YW5jZSBvZiBhcHAgYW5kIGRhdGFcbiAgICovXG4gIGVudjogRW52aXJvbm1lbnQ7XG4gIG1hcDogTWFwRGF0YSB8IHVuZGVmaW5lZDtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoZW52OiBFbnZpcm9ubWVudCkge1xuICAgIHRoaXMuZW52ID0gZW52O1xuICAgIHRoaXMuZW52LmRyYXdMb2FkaW5nU2NyZWVuKHRoaXMpO1xuICB9XG5cbiAgcHVibGljIHN0YXJ0KG1hcERhdGE6IE1hcERhdGEpIHtcbiAgICB0aGlzLm1hcCA9IG1hcERhdGE7XG4gICAgdGhpcy5lbnYuZHJhd01hcCh0aGlzKTtcbiAgICBcbiAgfVxuXG4gIHB1YmxpYyBnZXRNYXBEYXRhKCk6IE1hcERhdGEge1xuICAgIGlmICh0aGlzLm1hcCA9PSB1bmRlZmluZWQpIHRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHQgbWFwIGRhdGEgZnJvbSByZW1vdGUgc2VydmVyLCBzZXJ2ZXIgcmVzcG9uc2UgT0tcIik7XG4gICAgcmV0dXJuIHRoaXMubWFwITtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUkdCQSB9IGZyb20gXCIuLi8uLi93Z3ctbm9kZS9zcmMvY29sb3JzXCI7XG5cbmV4cG9ydCBjb25zdCBlcnJvclBpbmsgOiBSR0JBID0gWzI1NSwwLDI1NSwyNTVdO1xuZXhwb3J0IGNvbnN0IGNsaWZmOiBSR0JBID0gWzEwNCwgMTAzLCA5MywgMjU1XTsgXG5leHBvcnQgY29uc3Qgc3RlZXBDbGlmZjogUkdCQSA9IFs5NCwgOTMsIDgzLCAyNTVdOyBcblxuZXhwb3J0IGNvbnN0IGRlZXBTZWE6IFJHQkEgPSBbMjksIDE2MiwgMjE2LCAyNTVdO1xuZXhwb3J0IGNvbnN0IHNoYWxsb3dTZWE6IFJHQkEgPSBbMTI3LCAyMDUsIDI1NSwgMjU1XTtcbmV4cG9ydCBjb25zdCBjb2FzdGFsOiBSR0JBID0gWzI1NSwgMjU1LCAyMDQsIDI1NV07XG5leHBvcnQgY29uc3QgbG93bGFuZHM6IFJHQkEgPSBbOTAsIDY3LCA0OSwgMjU1XTtcbmV4cG9ydCBjb25zdCBoaWxsczogUkdCQSA9IFs5OSwgNzMsIDU1LCAyNTVdO1xuZXhwb3J0IGNvbnN0IGhpZ2hsYW5kczogUkdCQSA9IFsxMDcsIDg4LCA3MywgMjU1XTtcbmV4cG9ydCBjb25zdCBwZWFrczogUkdCQSA9IFsxMTQsIDExMywgMTAzLCAyNTVdO1xuXG4iLCJpbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9hcHBcIjtcblxuZXhwb3J0IGNsYXNzIEVudmlyb25tZW50IHtcbiAgd2lkdGg6IG51bWJlcjtcbiAgaGVpZ2h0OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3Iod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gIH1cblxuICBkcmF3TWFwKGFwcDogQXBwKSB7XG5cbiAgfVxuXG4gIGRyYXdMb2FkaW5nU2NyZWVuKGFwcDogQXBwKSB7XG4gICAgXG4gIH1cbn0iLCJpbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9hcHBcIjtcbmltcG9ydCB7IGVycm9yUGluaywgY2xpZmYsIHN0ZWVwQ2xpZmYsIGhpZ2hsYW5kcyB9IGZyb20gXCIuL2NvbG9yc1wiO1xuaW1wb3J0IHsgRW52aXJvbm1lbnQgfSBmcm9tIFwiLi9lbnZpcm9ubWVudFwiO1xuaW1wb3J0IHsgaGVpZ2h0Q29sb3JNYXAgfSBmcm9tIFwiLi9oZWlnaHRDb2xvck1hcFwiO1xuaW1wb3J0IHsgTWFwRGF0YSwgTWFwUG9pbnQgfSBmcm9tIFwiLi4vLi4vd2d3LW5vZGUvc3JjL21hcERhdGFcIjtcbmltcG9ydCB7IG5vcm1hbGl6ZVZhbHVlIH0gZnJvbSBcIi4vbm9ybWFsaXplVmFsdWVcIjtcbmltcG9ydCB7IFJHQkEgfSBmcm9tIFwiLi4vLi4vd2d3LW5vZGUvc3JjL2NvbG9yc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIENhbnZhc1N0YWdlIHtcbiAgZWxlbWVudDogSFRNTENhbnZhc0VsZW1lbnQ7XG4gIGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbn1cblxuLyoqXG4gKiBJbnRlcmZhY2UgdG8gaG9sZCBjb29yZGluYXRlcyBmb3IgYSBtb3VzZSBjbGljayBldmVudFxuICovXG5leHBvcnQgaW50ZXJmYWNlIG1vdXNlQ2xpY2sge1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbn1cblxuXG5leHBvcnQgY2xhc3MgV2ViRW52aXJvbm1lbnQgZXh0ZW5kcyBFbnZpcm9ubWVudCB7XG4gIC8qKlxuICAgKiBUaGUgY2FudmFzKHMpIHRvIGRyYXcgdGhlIGFwcCBvblxuICAgKi9cbiAgc3RhZ2U6IENhbnZhc1N0YWdlW107XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgY2FudmFzIGVsZW1lbnRzXG4gICAqIE1heCAxMlxuICAgKiBcbiAgICogQHBhcmFtIGNvbnRlbnRBcmVhSWQgU3RyaW5nIEhUTUwgRE9NIElEIG9mIHRoZSBlbGVtZW50IHdoaWNoIHRvIGFwcGVuZCB0aGUgY2FudmFzKHMpXG4gICAqIEBwYXJhbSBzdGFnZXMgU3RyaW5nIGFycmF5IG9mIGNsYXNzIG5hbWVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBjYW52YXMgZWxlbWVudChzKVxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRlbnRBcmVhSWQ6IHN0cmluZywgc3RhZ2VzPzogc3RyaW5nW10pIHtcbiAgICAvLyBTYW5pdGl6ZSBpbnB1dHMsIGNoZWNrIGNvbnRlbnQgYXJlYSBmb3IgdmFsaWRpdHlcbiAgICBsZXQgY29udGVudEFyZWE6IEhUTUxFbGVtZW50O1xuICAgIGlmIChjb250ZW50QXJlYUlkLmxlbmd0aCA8IDEpIHRocm93IG5ldyBFcnJvcihcIklEIG9mIEhUTUwgZWxlbWVudCB0byBhcHBlbmQgdG8gaXMgZW1wdHkgXCIgKyBjb250ZW50QXJlYUlkKTtcbiAgICBpZiAoIShjb250ZW50QXJlYSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbnRlbnRBcmVhSWQpISkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBmaW5kIGNvbnRlbnQgYXJlYSBieSBJRDogXCIgKyBjb250ZW50QXJlYUlkKTtcbiAgICB9XG4gICAgc3RhZ2VzID0gc3RhZ2VzID8/IFtcImFwcFwiXTtcblxuICAgIC8vIEdldC9TZXQgdGhlIHdpZHRoICYgaGVpZ2h0IG9mIHRoZSBjb250ZW50IGFyZWFcbiAgICBzdXBlcihjb250ZW50QXJlYSEub2Zmc2V0V2lkdGgsIGNvbnRlbnRBcmVhIS5vZmZzZXRIZWlnaHQpO1xuXG4gICAgLy8gUG9wdWxhdGUgc3RhZ2UgYXJyYXksIHVwIHRvIDEyIHN0YWdlc1xuICAgIHRoaXMuc3RhZ2UgPSBuZXcgQXJyYXkoTWF0aC5taW4oc3RhZ2VzLmxlbmd0aCwxMikpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN0YWdlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnN0YWdlW2ldID0gdGhpcy5jcmVhdGVDYW52YXMoY29udGVudEFyZWEsc3RhZ2VzW2ldKTtcbiAgICB9XG5cbiAgICAvLyBJbnB1dCBIYW5kbGVyXG4gICAgbGV0IGNsYXNzQWNjZXNzb3IgPSB0aGlzO1xuICAgIHRoaXMuc3RhZ2VbdGhpcy5zdGFnZS5sZW5ndGgtMV0uZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBmdW5jdGlvbihlKXtcbiAgICAgIGNsYXNzQWNjZXNzb3IubW91c2VDbGlja0V2ZW50KGUpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBjYW52YXMgb24gdGhlIGVsZW1lbnQgd2l0aCB0aGUgSUQgb2YgaWRcbiAgICogQHBhcmFtIGNsYXNzTmFtZSBTdHJpbmcgY2xhc3MgbmFtZSB0byBhcHBseSB0byBjYW52YXNcbiAgICogQHBhcmFtIGNvbnRlbnRBcmVhIEhUTUxFbGVtZW50IHRvIGFwcGVuZCB0aGUgY2FudmFzIHRvXG4gICAqIEByZXR1cm5zIENhbnZhc1N0YWdlIGNvbnRhaW5pbmcgdGhlIEhUTUxFbGVtZW50IGFuZCBkcmF3aW5nIGNvbnRleHRcbiAgICovXG4gIHByaXZhdGUgY3JlYXRlQ2FudmFzKGNvbnRlbnRBcmVhOiBIVE1MRWxlbWVudCwgY2xhc3NOYW1lOiBzdHJpbmcpIDogQ2FudmFzU3RhZ2Uge1xuICAgIGxldCBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuICAgIGxldCBjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XG5cbiAgICAvLyBDcmVhdGUgY2FudmFzIGFuZCBhcHBlbmQgdG8gcGFnZSwgd2l0aCBlcnJvciBoYW5kbGluZ1xuICAgIGlmICghKGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIikgYXMgSFRNTENhbnZhc0VsZW1lbnQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gY3JlYXRlIGNhbnZhczogXCIgKyBjbGFzc05hbWUpO1xuICAgIH1cblxuICAgIC8vIFNldCBjbGFzcyBvZiB0aGUgY2FudmFzXG4gICAgY2FudmFzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICBjYW52YXMud2lkdGggPSBjb250ZW50QXJlYSEub2Zmc2V0V2lkdGg7XG4gICAgY2FudmFzLmhlaWdodCA9IGNvbnRlbnRBcmVhIS5vZmZzZXRIZWlnaHQ7XG5cbiAgICAvLyBBcHBlbmQgdGhlIGNhbnZhcyB0byB0aGUgY29udGVudCBhcmVhIFxuICAgIC8vIFtlcnJvciBjaGVja2luZyBkb25lIHByZXZpb3VzbHkgaW4gY2xhc3MgY29uc3RydWN0b3JdXG4gICAgY29udGVudEFyZWEuYXBwZW5kKGNhbnZhcyk7XG5cbiAgICAvLyBHZXQgY29udGV4dCwgd2l0aCBlcnJvciBoYW5kbGluZ1xuICAgIGlmICghKGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpISkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIjJkIGNvbnRleHQgbm90IHN1cHBvcnRlZCBvciBjYW52YXMgYWxyZWFkeSBpbml0aWFsaXplZCBcIiArIGNsYXNzTmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVsZW1lbnQ6IGNhbnZhcyxcbiAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgfVxuICB9XG5cbiAgZHJhd01hcChhcHA6IEFwcCk6IHZvaWQge1xuICAgIHRoaXMuZHJhd01hcExheWVyKGFwcCx0aGlzLnN0YWdlWzBdLmNvbnRleHQpO1xuICAgIHRoaXMuZHJhd1VJKGFwcCx0aGlzLnN0YWdlWzJdLmNvbnRleHQpO1xuICB9XG5cbiAgcHJpdmF0ZSBkcmF3TWFwTGF5ZXIoYXBwOiBBcHAsIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBtYXBYPzogbnVtYmVyLCBtYXBZPzogbnVtYmVyKSB7XG4gICAgbWFwWCA9IG1hcFggPz8gMDtcbiAgICBtYXBZID0gbWFwWSA/PyAwO1xuICAgIGNvbnN0IG1hcERhdGE6IE1hcERhdGEgPSBhcHAuZ2V0TWFwRGF0YSgpO1xuICAgIGNvbnN0IGRyYXdXaWR0aDogbnVtYmVyID0gTWF0aC5taW4oYXBwLmVudi53aWR0aCxtYXBEYXRhLndpZHRoKTtcbiAgICBjb25zdCBkcmF3SGVpZ2h0OiBudW1iZXIgPSBNYXRoLm1pbihhcHAuZW52LmhlaWdodCxtYXBEYXRhLmhlaWdodCk7XG4gICAgdmFyIGltYWdlRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgZHJhd1dpZHRoLCBkcmF3SGVpZ2h0KTtcblxuICAgIGZvciAodmFyIHggPSAwOyB4IDwgZHJhd1dpZHRoOyB4KyspIHtcbiAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgZHJhd0hlaWdodDsgeSsrKSB7XG4gICAgICAgIC8vIHBpeGVsIGRhdGEgaW5kZXggdHJhY2tlciwgNCBpbmRpY2VzIChSR0JBKSBhcmUgdXNlZCBwZXIgcGl4ZWxcbiAgICAgICAgY29uc3QgcGl4ZWxEYXRhSW5kZXggPSAoeCArIHkgKiBkcmF3V2lkdGgpICogNDtcblxuICAgICAgICAvLyBtYXBQb2ludCBhdCB0aGlzIHgseVxuICAgICAgICBjb25zdCBtYXBQb2ludDogTWFwUG9pbnQgPSBtYXBEYXRhLm1hcFBvaW50c1ttYXBYICsgeF1bbWFwWSArIHldO1xuXG4gICAgICAgIC8vIE5vcm1hbGl6ZWQgaGVpZ2h0IHZhbHVlIGZvciB0aGlzIHBvaW50XG4gICAgICAgIGNvbnN0IGhlaWdodE5vcm1hbGl6ZWQgPSBub3JtYWxpemVWYWx1ZShtYXBQb2ludC5oZWlnaHQsIG1hcERhdGEubWluSGVpZ2h0LCBtYXBEYXRhLm1heEhlaWdodCk7XG5cbiAgICAgICAgLy8gTWFwIGhlaWdodCB0byBjb2xvciB2aWEgaGVpZ2h0Q29sb3JNYXBcbiAgICAgICAgY29uc3QgY29sb3JNYXAgPSBoZWlnaHRDb2xvck1hcC5maW5kKChtYXApID0+IGhlaWdodE5vcm1hbGl6ZWQgPj0gbWFwLmhlaWdodFJhbmdlWzBdICYmIGhlaWdodE5vcm1hbGl6ZWQgPCBtYXAuaGVpZ2h0UmFuZ2VbMV0pO1xuICAgICAgICBsZXQgY29sb3I6IFJHQkEgPSBjb2xvck1hcCA/IGNvbG9yTWFwLmNvbG9yIDogZXJyb3JQaW5rOyAvLyBkZWZhdWx0IHRvIGVycm9yIGNvbG9yIGlmIG5vIG1hcHBpbmcgZm91bmRcblxuICAgICAgICAvLyBTYW1wbGUgc3RlZXBuZXNzIG9mIHN1cnJvdW5kaW5nIHRpbGVzXG4gICAgICAgIGxldCBzdGVlcG5lc3M6IG51bWJlciA9IG1hcFBvaW50LnN0ZWVwbmVzcyA/PyAwO1xuXG4gICAgICAgIGlmIChzdGVlcG5lc3MgPj0gMC4wMjUgJiYgIW1hcFBvaW50LmlzV2F0ZXIpIHtcbiAgICAgICAgICBjb2xvciA9IGNsaWZmO1xuICAgICAgICAgIGlmIChzdGVlcG5lc3MgPiAwLjAzKVxuICAgICAgICAgICAgY29sb3IgPSBzdGVlcENsaWZmO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9sZXQgdGVtcENvbG9yID0gdGVtcGVyYXR1cmVUb0NvbG9yKG1hcFBvaW50LnRlbXBlcmF0dXJlISk7XG4gICAgICAgIHRoaXMuc2V0Q29sb3IoaW1hZ2VEYXRhLCBwaXhlbERhdGFJbmRleCwgY29sb3IpO1xuICAgICAgICAvL3RoaXMuc2V0Q29sb3Iob3ZlcmxheURhdGEsIHBpeGVsRGF0YUluZGV4LCB0ZW1wQ29sb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICBjdHgucHV0SW1hZ2VEYXRhKGltYWdlRGF0YSwgMCwgMCk7XG4gICAgLy90aGlzLnN0YWdlWzFdLmNvbnRleHQucHV0SW1hZ2VEYXRhKG92ZXJsYXlEYXRhLCAwLCAwKTtcbiAgfVxuXG4gIHByaXZhdGUgZHJhd1VJKGFwcDogQXBwLCBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjb25zdCBzdGFydFggPSB0aGlzLndpZHRoIC0gMTI1O1xuICAgIGNvbnN0IHN0YXJ0WSA9IHRoaXMuaGVpZ2h0IC0gMTAwO1xuICAgIGN0eC5tb3ZlVG8oc3RhcnRYLCBzdGFydFkpO1xuICAgIGN0eC5saW5lVG8oc3RhcnRYKzEwMCwgc3RhcnRZKzc1KTtcbiAgICBjdHgubGluZVRvKCtzdGFydFgrMTAwLCBzdGFydFkrMjUpO1xuICAgIGN0eC5maWxsKCk7XG4gIH1cblxuICAvKipcbiAgICogXG4gICAqIEBwYXJhbSBpbWFnZURhdGEgVGhlIEhUTUwgQ2FudmFzIENvbnRleHQgSW1hZ2VEYXRhIHRvIHdvcmsgd2l0aFxuICAgKiBAcGFyYW0gaW5kZXggU3RhcnRpbmcgaW5kZXggb2YgdGhlIHBpeGVsIGRhdGFcbiAgICogQHBhcmFtIGNvbG9yIFJHQkEgY29sb3IgdG8gYXBwbHkgdG8gdGhlIHBpeGVsXG4gICAqL1xuICBwcml2YXRlIHNldENvbG9yKGltYWdlRGF0YTpJbWFnZURhdGEsIGluZGV4Om51bWJlciwgY29sb3I6UkdCQSkge1xuICAgIGltYWdlRGF0YS5kYXRhW2luZGV4XSA9IGNvbG9yWzBdO1xuICAgIGltYWdlRGF0YS5kYXRhW2luZGV4KzFdID0gY29sb3JbMV07XG4gICAgaW1hZ2VEYXRhLmRhdGFbaW5kZXgrMl0gPSBjb2xvclsyXTtcbiAgICBpbWFnZURhdGEuZGF0YVtpbmRleCszXSA9IGNvbG9yWzNdO1xuICB9XG5cbiAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIGV2ZW50IC0gTW91c2UgY2xpY2sgZXZlbnRcbiAgICAgKiBAcmV0dXJucyAtIENvb3JkaW5hdGVzIGFzIG1vdXNlQ2xpY2sgaW50ZXJmYWNlXG4gICAgICovXG4gIGdldE1vdXNlUG9zaXRpb24oZXZlbnQ6IE1vdXNlRXZlbnQpIDogbW91c2VDbGljayB7XG4gICAgbGV0IHJlY3QgPSB0aGlzLnN0YWdlWzBdLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIC8vIGFicy4gc2l6ZSBvZiBlbGVtZW50XG4gICAgc2NhbGVYID0gdGhpcy5zdGFnZVswXS5lbGVtZW50LndpZHRoIC8gcmVjdC53aWR0aCwgICAgLy8gcmVsYXRpb25zaGlwIGJpdG1hcCB2cy4gZWxlbWVudCBmb3IgeFxuICAgIHNjYWxlWSA9IHRoaXMuc3RhZ2VbMF0uZWxlbWVudC5oZWlnaHQgLyByZWN0LmhlaWdodDsgIC8vIHJlbGF0aW9uc2hpcCBiaXRtYXAgdnMuIGVsZW1lbnQgZm9yIHlcblxuICAgIHJldHVybiB7XG4gICAgICAgIHg6IChldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0KSAqIHNjYWxlWCwgICAvLyBzY2FsZSBtb3VzZSBjb29yZGluYXRlcyBhZnRlciB0aGV5IGhhdmVcbiAgICAgICAgeTogKGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcCkgKiBzY2FsZVkgICAgIC8vIGJlZW4gYWRqdXN0ZWQgdG8gYmUgcmVsYXRpdmUgdG8gZWxlbWVudFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIG1vdXNlIGNsaWNrc1xuICAgKiBcbiAgICogQHBhcmFtIGUgLSBUcmlnZ2VyaW5nIGV2ZW50XG4gICAqL1xuICBtb3VzZUNsaWNrRXZlbnQoZTpNb3VzZUV2ZW50KSB7XG4gICAgbGV0IG1vdXNlUG9zIDogbW91c2VDbGljayA9IHRoaXMuZ2V0TW91c2VQb3NpdGlvbihlKTtcbiAgICBcbiAgfVxuXG4gIGRyYXdMb2FkaW5nU2NyZWVuKGFwcDogQXBwKTogdm9pZCB7XG4gIHRoaXMuc3RhZ2VbMF0uY29udGV4dC5mb250ID0gXCI0ZW0gc2Fucy1zZXJpZlwiO1xuICB0aGlzLnN0YWdlWzBdLmNvbnRleHQuZmlsbFRleHQoXCJMb2FkaW5nLi4uXCIsIHRoaXMud2lkdGgvMywgdGhpcy5oZWlnaHQvMyk7XG4gIH1cbn0iLCJpbXBvcnQgeyBSR0JBIH0gZnJvbSBcIi4uLy4uL3dndy1ub2RlL3NyYy9jb2xvcnNcIjtcbmltcG9ydCB7IGNvYXN0YWwsIGRlZXBTZWEsIGhpZ2hsYW5kcywgaGlsbHMsIGxvd2xhbmRzLCBwZWFrcywgc2hhbGxvd1NlYSB9IGZyb20gXCIuL2NvbG9yc1wiO1xuXG5pbnRlcmZhY2UgSGVpZ2h0Q29sb3JNYXAge1xuICBoZWlnaHRSYW5nZTogW251bWJlciwgbnVtYmVyXTtcbiAgY29sb3I6IFJHQkE7XG4gIGxhYmVsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBoZWlnaHRDb2xvck1hcDogSGVpZ2h0Q29sb3JNYXBbXSA9IFtcbiAge1xuICAgIGhlaWdodFJhbmdlOiBbLUluZmluaXR5LCAwLjAzXSxcbiAgICBjb2xvcjogZGVlcFNlYSxcbiAgICBsYWJlbDogXCJkZWVwIHdhdGVyXCIsXG4gIH0sXG4gIHtcbiAgICBoZWlnaHRSYW5nZTogWzAuMDMsIDAuMV0sXG4gICAgY29sb3I6IHNoYWxsb3dTZWEsXG4gICAgbGFiZWw6IFwid2F0ZXJcIixcbiAgfSxcbiAge1xuICAgIGhlaWdodFJhbmdlOiBbMC4xLCAwLjEyXSxcbiAgICBjb2xvcjogY29hc3RhbCxcbiAgICBsYWJlbDogXCJjb2FzdGFsXCIsXG4gIH0sXG4gIHtcbiAgICBoZWlnaHRSYW5nZTogWzAuMTIsIDAuM10sXG4gICAgY29sb3I6IGxvd2xhbmRzLFxuICAgIGxhYmVsOiBcImxvd2xhbmRzXCIsXG4gIH0sXG4gIHtcbiAgICBoZWlnaHRSYW5nZTogWzAuMywgMC41Ml0sXG4gICAgY29sb3I6IGhpbGxzLFxuICAgIGxhYmVsOiBcImhpbGxzXCIsXG4gIH0sXG4gIHtcbiAgICBoZWlnaHRSYW5nZTogWzAuNTIsIDAuNjFdLFxuICAgIGNvbG9yOiBoaWdobGFuZHMsXG4gICAgbGFiZWw6IFwiaGlnaGxhbmRzXCIsXG4gIH0sXG4gIHtcbiAgICBoZWlnaHRSYW5nZTogWzAuNjEsIEluZmluaXR5XSxcbiAgICBjb2xvcjogcGVha3MsXG4gICAgbGFiZWw6IFwibW91bnRhaW5zXCIsXG4gIH0sXG5dO1xuIiwiaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuaW1wb3J0IHsgaW5mbGF0ZSB9IGZyb20gXCJwYWtvXCI7XG5pbXBvcnQgeyBNYXBEYXRhIH0gZnJvbSBcIi4uLy4uL3dndy1ub2RlL3NyYy9tYXBEYXRhXCI7XG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9hcHBcIjtcbmltcG9ydCB7IFdlYkVudmlyb25tZW50IH0gZnJvbSBcIi4vZW52aXJvbm1lbnRXZWJcIjtcblxubGV0IGFwcGxpY2F0aW9uOiBBcHA7XG5cbmluaXQoKTtcblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgYXBwbGljYXRpb24gPSBuZXcgQXBwKG5ldyBXZWJFbnZpcm9ubWVudChcIm1haW5cIixbXCJhcHBcIixcIm92ZXJsYXlcIixcInVpXCJdKSk7XG4gIGxvYWRBcHAoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZEFwcCgpIHtcbiAgYXhpb3MucG9zdChcbiAgICAnaHR0cDovL2xvY2FsaG9zdDozMDAwL2dldE1hcCcsIHtcbiAgICAncmVzcG9uc2VUeXBlJyA6ICdhcnJheWJ1ZmZlcicsXG4gICAgJ2RlY29tcHJlc3MnIDogJ3RydWUnLFxuICB9KVxuICAudGhlbihhc3luYyBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAvLyBIYW5kbGUgc2VydmVyIHJlc3BvbnNlXG4gICAgY29uc3QgbWFwRGF0YTogTWFwRGF0YSA9IHJlc3BvbnNlLmRhdGEgYXMgTWFwRGF0YTtcblxuICAgIGFwcGxpY2F0aW9uLnN0YXJ0KG1hcERhdGEpO1xuICB9KVxuICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgY29uc29sZS5sb2coZXJyb3IpO1xuICB9KTtcbn1cblxuXG4iLCJleHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWU6IG51bWJlciwgbWluVmFsdWU6IG51bWJlciwgbWF4VmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gIHJldHVybiAodmFsdWUgLSBtaW5WYWx1ZSkgLyAobWF4VmFsdWUgLSBtaW5WYWx1ZSk7XG59IiwiLy8gQXhpb3MgdjEuMy40IENvcHlyaWdodCAoYykgMjAyMyBNYXR0IFphYnJpc2tpZSBhbmQgY29udHJpYnV0b3JzXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbmNvbnN0IHt0b1N0cmluZ30gPSBPYmplY3QucHJvdG90eXBlO1xuY29uc3Qge2dldFByb3RvdHlwZU9mfSA9IE9iamVjdDtcblxuY29uc3Qga2luZE9mID0gKGNhY2hlID0+IHRoaW5nID0+IHtcbiAgICBjb25zdCBzdHIgPSB0b1N0cmluZy5jYWxsKHRoaW5nKTtcbiAgICByZXR1cm4gY2FjaGVbc3RyXSB8fCAoY2FjaGVbc3RyXSA9IHN0ci5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKSk7XG59KShPYmplY3QuY3JlYXRlKG51bGwpKTtcblxuY29uc3Qga2luZE9mVGVzdCA9ICh0eXBlKSA9PiB7XG4gIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAodGhpbmcpID0+IGtpbmRPZih0aGluZykgPT09IHR5cGVcbn07XG5cbmNvbnN0IHR5cGVPZlRlc3QgPSB0eXBlID0+IHRoaW5nID0+IHR5cGVvZiB0aGluZyA9PT0gdHlwZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IHtpc0FycmF5fSA9IEFycmF5O1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVW5kZWZpbmVkID0gdHlwZU9mVGVzdCgndW5kZWZpbmVkJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgaXNGdW5jdGlvbih2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIpICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQXJyYXlCdWZmZXIgPSBraW5kT2ZUZXN0KCdBcnJheUJ1ZmZlcicpO1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgbGV0IHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAoaXNBcnJheUJ1ZmZlcih2YWwuYnVmZmVyKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmluZyA9IHR5cGVPZlRlc3QoJ3N0cmluZycpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRnVuY3Rpb24gPSB0eXBlT2ZUZXN0KCdmdW5jdGlvbicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzTnVtYmVyID0gdHlwZU9mVGVzdCgnbnVtYmVyJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyAhPT0gbnVsbCAmJiB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQm9vbGVhblxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQm9vbGVhbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQm9vbGVhbiA9IHRoaW5nID0+IHRoaW5nID09PSB0cnVlIHx8IHRoaW5nID09PSBmYWxzZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4ge1xuICBpZiAoa2luZE9mKHZhbCkgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgcHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIChwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90b3R5cGUpID09PSBudWxsKSAmJiAhKFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWwpICYmICEoU3ltYm9sLml0ZXJhdG9yIGluIHZhbCk7XG59O1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNEYXRlID0ga2luZE9mVGVzdCgnRGF0ZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlID0ga2luZE9mVGVzdCgnRmlsZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNCbG9iID0ga2luZE9mVGVzdCgnQmxvYicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZUxpc3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZUxpc3QgPSBraW5kT2ZUZXN0KCdGaWxlTGlzdCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzU3RyZWFtID0gKHZhbCkgPT4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGb3JtRGF0YSA9ICh0aGluZykgPT4ge1xuICBjb25zdCBwYXR0ZXJuID0gJ1tvYmplY3QgRm9ybURhdGFdJztcbiAgcmV0dXJuIHRoaW5nICYmIChcbiAgICAodHlwZW9mIEZvcm1EYXRhID09PSAnZnVuY3Rpb24nICYmIHRoaW5nIGluc3RhbmNlb2YgRm9ybURhdGEpIHx8XG4gICAgdG9TdHJpbmcuY2FsbCh0aGluZykgPT09IHBhdHRlcm4gfHxcbiAgICAoaXNGdW5jdGlvbih0aGluZy50b1N0cmluZykgJiYgdGhpbmcudG9TdHJpbmcoKSA9PT0gcGF0dGVybilcbiAgKTtcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VSTFNlYXJjaFBhcmFtcyA9IGtpbmRPZlRlc3QoJ1VSTFNlYXJjaFBhcmFtcycpO1xuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5jb25zdCB0cmltID0gKHN0cikgPT4gc3RyLnRyaW0gP1xuICBzdHIudHJpbSgpIDogc3RyLnJlcGxhY2UoL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLCAnJyk7XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzID0gZmFsc2VdXG4gKiBAcmV0dXJucyB7YW55fVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4sIHthbGxPd25LZXlzID0gZmFsc2V9ID0ge30pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgaTtcbiAgbGV0IGw7XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGNvbnN0IGtleXMgPSBhbGxPd25LZXlzID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKSA6IE9iamVjdC5rZXlzKG9iaik7XG4gICAgY29uc3QgbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgbGV0IGtleTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmosIGtleSkge1xuICBrZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gIGxldCBfa2V5O1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIF9rZXkgPSBrZXlzW2ldO1xuICAgIGlmIChrZXkgPT09IF9rZXkudG9Mb3dlckNhc2UoKSkge1xuICAgICAgcmV0dXJuIF9rZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5jb25zdCBfZ2xvYmFsID0gKCgpID0+IHtcbiAgLyplc2xpbnQgbm8tdW5kZWY6MCovXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIGdsb2JhbFRoaXM7XG4gIHJldHVybiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpXG59KSgpO1xuXG5jb25zdCBpc0NvbnRleHREZWZpbmVkID0gKGNvbnRleHQpID0+ICFpc1VuZGVmaW5lZChjb250ZXh0KSAmJiBjb250ZXh0ICE9PSBfZ2xvYmFsO1xuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIGNvbnN0IHtjYXNlbGVzc30gPSBpc0NvbnRleHREZWZpbmVkKHRoaXMpICYmIHRoaXMgfHwge307XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBjb25zdCBhc3NpZ25WYWx1ZSA9ICh2YWwsIGtleSkgPT4ge1xuICAgIGNvbnN0IHRhcmdldEtleSA9IGNhc2VsZXNzICYmIGZpbmRLZXkocmVzdWx0LCBrZXkpIHx8IGtleTtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRbdGFyZ2V0S2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IG1lcmdlKHJlc3VsdFt0YXJnZXRLZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IHZhbDtcbiAgICB9XG4gIH07XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgYXJndW1lbnRzW2ldICYmIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXNdXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmNvbnN0IGV4dGVuZCA9IChhLCBiLCB0aGlzQXJnLCB7YWxsT3duS2V5c309IHt9KSA9PiB7XG4gIGZvckVhY2goYiwgKHZhbCwga2V5KSA9PiB7XG4gICAgaWYgKHRoaXNBcmcgJiYgaXNGdW5jdGlvbih2YWwpKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0sIHthbGxPd25LZXlzfSk7XG4gIHJldHVybiBhO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuY29uc3Qgc3RyaXBCT00gPSAoY29udGVudCkgPT4ge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn07XG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDb25zdHJ1Y3RvclxuICogQHBhcmFtIHtvYmplY3R9IFtwcm9wc11cbiAqIEBwYXJhbSB7b2JqZWN0fSBbZGVzY3JpcHRvcnNdXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGluaGVyaXRzID0gKGNvbnN0cnVjdG9yLCBzdXBlckNvbnN0cnVjdG9yLCBwcm9wcywgZGVzY3JpcHRvcnMpID0+IHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNvbnN0cnVjdG9yLnByb3RvdHlwZSwgZGVzY3JpcHRvcnMpO1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3RvcjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnN0cnVjdG9yLCAnc3VwZXInLCB7XG4gICAgdmFsdWU6IHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlXG4gIH0pO1xuICBwcm9wcyAmJiBPYmplY3QuYXNzaWduKGNvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvcHMpO1xufTtcblxuLyoqXG4gKiBSZXNvbHZlIG9iamVjdCB3aXRoIGRlZXAgcHJvdG90eXBlIGNoYWluIHRvIGEgZmxhdCBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2VPYmogc291cmNlIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IFtkZXN0T2JqXVxuICogQHBhcmFtIHtGdW5jdGlvbnxCb29sZWFufSBbZmlsdGVyXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Byb3BGaWx0ZXJdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuY29uc3QgdG9GbGF0T2JqZWN0ID0gKHNvdXJjZU9iaiwgZGVzdE9iaiwgZmlsdGVyLCBwcm9wRmlsdGVyKSA9PiB7XG4gIGxldCBwcm9wcztcbiAgbGV0IGk7XG4gIGxldCBwcm9wO1xuICBjb25zdCBtZXJnZWQgPSB7fTtcblxuICBkZXN0T2JqID0gZGVzdE9iaiB8fCB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIGlmIChzb3VyY2VPYmogPT0gbnVsbCkgcmV0dXJuIGRlc3RPYmo7XG5cbiAgZG8ge1xuICAgIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlT2JqKTtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICBwcm9wID0gcHJvcHNbaV07XG4gICAgICBpZiAoKCFwcm9wRmlsdGVyIHx8IHByb3BGaWx0ZXIocHJvcCwgc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgIW1lcmdlZFtwcm9wXSkge1xuICAgICAgICBkZXN0T2JqW3Byb3BdID0gc291cmNlT2JqW3Byb3BdO1xuICAgICAgICBtZXJnZWRbcHJvcF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3VyY2VPYmogPSBmaWx0ZXIgIT09IGZhbHNlICYmIGdldFByb3RvdHlwZU9mKHNvdXJjZU9iaik7XG4gIH0gd2hpbGUgKHNvdXJjZU9iaiAmJiAoIWZpbHRlciB8fCBmaWx0ZXIoc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgc291cmNlT2JqICE9PSBPYmplY3QucHJvdG90eXBlKTtcblxuICByZXR1cm4gZGVzdE9iajtcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGVuZHMgd2l0aCB0aGUgY2hhcmFjdGVycyBvZiBhIHNwZWNpZmllZCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uPSAwXVxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBlbmRzV2l0aCA9IChzdHIsIHNlYXJjaFN0cmluZywgcG9zaXRpb24pID0+IHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uID4gc3RyLmxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gc3RyLmxlbmd0aDtcbiAgfVxuICBwb3NpdGlvbiAtPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICBjb25zdCBsYXN0SW5kZXggPSBzdHIuaW5kZXhPZihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKTtcbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gLTEgJiYgbGFzdEluZGV4ID09PSBwb3NpdGlvbjtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIG5ldyBhcnJheSBmcm9tIGFycmF5IGxpa2Ugb2JqZWN0IG9yIG51bGwgaWYgZmFpbGVkXG4gKlxuICogQHBhcmFtIHsqfSBbdGhpbmddXG4gKlxuICogQHJldHVybnMgez9BcnJheX1cbiAqL1xuY29uc3QgdG9BcnJheSA9ICh0aGluZykgPT4ge1xuICBpZiAoIXRoaW5nKSByZXR1cm4gbnVsbDtcbiAgaWYgKGlzQXJyYXkodGhpbmcpKSByZXR1cm4gdGhpbmc7XG4gIGxldCBpID0gdGhpbmcubGVuZ3RoO1xuICBpZiAoIWlzTnVtYmVyKGkpKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgYXJyID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGFycltpXSA9IHRoaW5nW2ldO1xuICB9XG4gIHJldHVybiBhcnI7XG59O1xuXG4vKipcbiAqIENoZWNraW5nIGlmIHRoZSBVaW50OEFycmF5IGV4aXN0cyBhbmQgaWYgaXQgZG9lcywgaXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmIHRoZVxuICogdGhpbmcgcGFzc2VkIGluIGlzIGFuIGluc3RhbmNlIG9mIFVpbnQ4QXJyYXlcbiAqXG4gKiBAcGFyYW0ge1R5cGVkQXJyYXl9XG4gKlxuICogQHJldHVybnMge0FycmF5fVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuY29uc3QgaXNUeXBlZEFycmF5ID0gKFR5cGVkQXJyYXkgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gdGhpbmcgPT4ge1xuICAgIHJldHVybiBUeXBlZEFycmF5ICYmIHRoaW5nIGluc3RhbmNlb2YgVHlwZWRBcnJheTtcbiAgfTtcbn0pKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBnZXRQcm90b3R5cGVPZihVaW50OEFycmF5KSk7XG5cbi8qKlxuICogRm9yIGVhY2ggZW50cnkgaW4gdGhlIG9iamVjdCwgY2FsbCB0aGUgZnVuY3Rpb24gd2l0aCB0aGUga2V5IGFuZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBlbnRyeS5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgZm9yRWFjaEVudHJ5ID0gKG9iaiwgZm4pID0+IHtcbiAgY29uc3QgZ2VuZXJhdG9yID0gb2JqICYmIG9ialtTeW1ib2wuaXRlcmF0b3JdO1xuXG4gIGNvbnN0IGl0ZXJhdG9yID0gZ2VuZXJhdG9yLmNhbGwob2JqKTtcblxuICBsZXQgcmVzdWx0O1xuXG4gIHdoaWxlICgocmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpKSAmJiAhcmVzdWx0LmRvbmUpIHtcbiAgICBjb25zdCBwYWlyID0gcmVzdWx0LnZhbHVlO1xuICAgIGZuLmNhbGwob2JqLCBwYWlyWzBdLCBwYWlyWzFdKTtcbiAgfVxufTtcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhbmQgYSBzdHJpbmcsIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGFsbCB0aGUgbWF0Y2hlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdFeHAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBzZWFyY2guXG4gKlxuICogQHJldHVybnMge0FycmF5PGJvb2xlYW4+fVxuICovXG5jb25zdCBtYXRjaEFsbCA9IChyZWdFeHAsIHN0cikgPT4ge1xuICBsZXQgbWF0Y2hlcztcbiAgY29uc3QgYXJyID0gW107XG5cbiAgd2hpbGUgKChtYXRjaGVzID0gcmVnRXhwLmV4ZWMoc3RyKSkgIT09IG51bGwpIHtcbiAgICBhcnIucHVzaChtYXRjaGVzKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59O1xuXG4vKiBDaGVja2luZyBpZiB0aGUga2luZE9mVGVzdCBmdW5jdGlvbiByZXR1cm5zIHRydWUgd2hlbiBwYXNzZWQgYW4gSFRNTEZvcm1FbGVtZW50LiAqL1xuY29uc3QgaXNIVE1MRm9ybSA9IGtpbmRPZlRlc3QoJ0hUTUxGb3JtRWxlbWVudCcpO1xuXG5jb25zdCB0b0NhbWVsQ2FzZSA9IHN0ciA9PiB7XG4gIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bLV9cXHNdKFthLXpcXGRdKShcXHcqKS9nLFxuICAgIGZ1bmN0aW9uIHJlcGxhY2VyKG0sIHAxLCBwMikge1xuICAgICAgcmV0dXJuIHAxLnRvVXBwZXJDYXNlKCkgKyBwMjtcbiAgICB9XG4gICk7XG59O1xuXG4vKiBDcmVhdGluZyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBjaGVjayBpZiBhbiBvYmplY3QgaGFzIGEgcHJvcGVydHkuICovXG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9ICgoe2hhc093blByb3BlcnR5fSkgPT4gKG9iaiwgcHJvcCkgPT4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKShPYmplY3QucHJvdG90eXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzUmVnRXhwID0ga2luZE9mVGVzdCgnUmVnRXhwJyk7XG5cbmNvbnN0IHJlZHVjZURlc2NyaXB0b3JzID0gKG9iaiwgcmVkdWNlcikgPT4ge1xuICBjb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iaik7XG4gIGNvbnN0IHJlZHVjZWREZXNjcmlwdG9ycyA9IHt9O1xuXG4gIGZvckVhY2goZGVzY3JpcHRvcnMsIChkZXNjcmlwdG9yLCBuYW1lKSA9PiB7XG4gICAgaWYgKHJlZHVjZXIoZGVzY3JpcHRvciwgbmFtZSwgb2JqKSAhPT0gZmFsc2UpIHtcbiAgICAgIHJlZHVjZWREZXNjcmlwdG9yc1tuYW1lXSA9IGRlc2NyaXB0b3I7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmosIHJlZHVjZWREZXNjcmlwdG9ycyk7XG59O1xuXG4vKipcbiAqIE1ha2VzIGFsbCBtZXRob2RzIHJlYWQtb25seVxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICovXG5cbmNvbnN0IGZyZWV6ZU1ldGhvZHMgPSAob2JqKSA9PiB7XG4gIHJlZHVjZURlc2NyaXB0b3JzKG9iaiwgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICAvLyBza2lwIHJlc3RyaWN0ZWQgcHJvcHMgaW4gc3RyaWN0IG1vZGVcbiAgICBpZiAoaXNGdW5jdGlvbihvYmopICYmIFsnYXJndW1lbnRzJywgJ2NhbGxlcicsICdjYWxsZWUnXS5pbmRleE9mKG5hbWUpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gb2JqW25hbWVdO1xuXG4gICAgaWYgKCFpc0Z1bmN0aW9uKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZmFsc2U7XG5cbiAgICBpZiAoJ3dyaXRhYmxlJyBpbiBkZXNjcmlwdG9yKSB7XG4gICAgICBkZXNjcmlwdG9yLndyaXRhYmxlID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFkZXNjcmlwdG9yLnNldCkge1xuICAgICAgZGVzY3JpcHRvci5zZXQgPSAoKSA9PiB7XG4gICAgICAgIHRocm93IEVycm9yKCdDYW4gbm90IHJld3JpdGUgcmVhZC1vbmx5IG1ldGhvZCBcXCcnICsgbmFtZSArICdcXCcnKTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn07XG5cbmNvbnN0IHRvT2JqZWN0U2V0ID0gKGFycmF5T3JTdHJpbmcsIGRlbGltaXRlcikgPT4ge1xuICBjb25zdCBvYmogPSB7fTtcblxuICBjb25zdCBkZWZpbmUgPSAoYXJyKSA9PiB7XG4gICAgYXJyLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgb2JqW3ZhbHVlXSA9IHRydWU7XG4gICAgfSk7XG4gIH07XG5cbiAgaXNBcnJheShhcnJheU9yU3RyaW5nKSA/IGRlZmluZShhcnJheU9yU3RyaW5nKSA6IGRlZmluZShTdHJpbmcoYXJyYXlPclN0cmluZykuc3BsaXQoZGVsaW1pdGVyKSk7XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fTtcblxuY29uc3QgdG9GaW5pdGVOdW1iZXIgPSAodmFsdWUsIGRlZmF1bHRWYWx1ZSkgPT4ge1xuICB2YWx1ZSA9ICt2YWx1ZTtcbiAgcmV0dXJuIE51bWJlci5pc0Zpbml0ZSh2YWx1ZSkgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcbn07XG5cbmNvbnN0IEFMUEhBID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JztcblxuY29uc3QgRElHSVQgPSAnMDEyMzQ1Njc4OSc7XG5cbmNvbnN0IEFMUEhBQkVUID0ge1xuICBESUdJVCxcbiAgQUxQSEEsXG4gIEFMUEhBX0RJR0lUOiBBTFBIQSArIEFMUEhBLnRvVXBwZXJDYXNlKCkgKyBESUdJVFxufTtcblxuY29uc3QgZ2VuZXJhdGVTdHJpbmcgPSAoc2l6ZSA9IDE2LCBhbHBoYWJldCA9IEFMUEhBQkVULkFMUEhBX0RJR0lUKSA9PiB7XG4gIGxldCBzdHIgPSAnJztcbiAgY29uc3Qge2xlbmd0aH0gPSBhbHBoYWJldDtcbiAgd2hpbGUgKHNpemUtLSkge1xuICAgIHN0ciArPSBhbHBoYWJldFtNYXRoLnJhbmRvbSgpICogbGVuZ3RofDBdO1xuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn07XG5cbi8qKlxuICogSWYgdGhlIHRoaW5nIGlzIGEgRm9ybURhdGEgb2JqZWN0LCByZXR1cm4gdHJ1ZSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IHRoaW5nIC0gVGhlIHRoaW5nIHRvIGNoZWNrLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1NwZWNDb21wbGlhbnRGb3JtKHRoaW5nKSB7XG4gIHJldHVybiAhISh0aGluZyAmJiBpc0Z1bmN0aW9uKHRoaW5nLmFwcGVuZCkgJiYgdGhpbmdbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ0Zvcm1EYXRhJyAmJiB0aGluZ1tTeW1ib2wuaXRlcmF0b3JdKTtcbn1cblxuY29uc3QgdG9KU09OT2JqZWN0ID0gKG9iaikgPT4ge1xuICBjb25zdCBzdGFjayA9IG5ldyBBcnJheSgxMCk7XG5cbiAgY29uc3QgdmlzaXQgPSAoc291cmNlLCBpKSA9PiB7XG5cbiAgICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgaWYgKHN0YWNrLmluZGV4T2Yoc291cmNlKSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYoISgndG9KU09OJyBpbiBzb3VyY2UpKSB7XG4gICAgICAgIHN0YWNrW2ldID0gc291cmNlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBpc0FycmF5KHNvdXJjZSkgPyBbXSA6IHt9O1xuXG4gICAgICAgIGZvckVhY2goc291cmNlLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlZHVjZWRWYWx1ZSA9IHZpc2l0KHZhbHVlLCBpICsgMSk7XG4gICAgICAgICAgIWlzVW5kZWZpbmVkKHJlZHVjZWRWYWx1ZSkgJiYgKHRhcmdldFtrZXldID0gcmVkdWNlZFZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RhY2tbaV0gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc291cmNlO1xuICB9O1xuXG4gIHJldHVybiB2aXNpdChvYmosIDApO1xufTtcblxudmFyIHV0aWxzID0ge1xuICBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nLFxuICBpc051bWJlcixcbiAgaXNCb29sZWFuLFxuICBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdCxcbiAgaXNVbmRlZmluZWQsXG4gIGlzRGF0ZSxcbiAgaXNGaWxlLFxuICBpc0Jsb2IsXG4gIGlzUmVnRXhwLFxuICBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzVHlwZWRBcnJheSxcbiAgaXNGaWxlTGlzdCxcbiAgZm9yRWFjaCxcbiAgbWVyZ2UsXG4gIGV4dGVuZCxcbiAgdHJpbSxcbiAgc3RyaXBCT00sXG4gIGluaGVyaXRzLFxuICB0b0ZsYXRPYmplY3QsXG4gIGtpbmRPZixcbiAga2luZE9mVGVzdCxcbiAgZW5kc1dpdGgsXG4gIHRvQXJyYXksXG4gIGZvckVhY2hFbnRyeSxcbiAgbWF0Y2hBbGwsXG4gIGlzSFRNTEZvcm0sXG4gIGhhc093blByb3BlcnR5LFxuICBoYXNPd25Qcm9wOiBoYXNPd25Qcm9wZXJ0eSwgLy8gYW4gYWxpYXMgdG8gYXZvaWQgRVNMaW50IG5vLXByb3RvdHlwZS1idWlsdGlucyBkZXRlY3Rpb25cbiAgcmVkdWNlRGVzY3JpcHRvcnMsXG4gIGZyZWV6ZU1ldGhvZHMsXG4gIHRvT2JqZWN0U2V0LFxuICB0b0NhbWVsQ2FzZSxcbiAgbm9vcCxcbiAgdG9GaW5pdGVOdW1iZXIsXG4gIGZpbmRLZXksXG4gIGdsb2JhbDogX2dsb2JhbCxcbiAgaXNDb250ZXh0RGVmaW5lZCxcbiAgQUxQSEFCRVQsXG4gIGdlbmVyYXRlU3RyaW5nLFxuICBpc1NwZWNDb21wbGlhbnRGb3JtLFxuICB0b0pTT05PYmplY3Rcbn07XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnXSBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBBeGlvc0Vycm9yKG1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgRXJyb3IuY2FsbCh0aGlzKTtcblxuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnN0YWNrID0gKG5ldyBFcnJvcigpKS5zdGFjaztcbiAgfVxuXG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIHRoaXMubmFtZSA9ICdBeGlvc0Vycm9yJztcbiAgY29kZSAmJiAodGhpcy5jb2RlID0gY29kZSk7XG4gIGNvbmZpZyAmJiAodGhpcy5jb25maWcgPSBjb25maWcpO1xuICByZXF1ZXN0ICYmICh0aGlzLnJlcXVlc3QgPSByZXF1ZXN0KTtcbiAgcmVzcG9uc2UgJiYgKHRoaXMucmVzcG9uc2UgPSByZXNwb25zZSk7XG59XG5cbnV0aWxzLmluaGVyaXRzKEF4aW9zRXJyb3IsIEVycm9yLCB7XG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHV0aWxzLnRvSlNPTk9iamVjdCh0aGlzLmNvbmZpZyksXG4gICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICBzdGF0dXM6IHRoaXMucmVzcG9uc2UgJiYgdGhpcy5yZXNwb25zZS5zdGF0dXMgPyB0aGlzLnJlc3BvbnNlLnN0YXR1cyA6IG51bGxcbiAgICB9O1xuICB9XG59KTtcblxuY29uc3QgcHJvdG90eXBlJDEgPSBBeGlvc0Vycm9yLnByb3RvdHlwZTtcbmNvbnN0IGRlc2NyaXB0b3JzID0ge307XG5cbltcbiAgJ0VSUl9CQURfT1BUSU9OX1ZBTFVFJyxcbiAgJ0VSUl9CQURfT1BUSU9OJyxcbiAgJ0VDT05OQUJPUlRFRCcsXG4gICdFVElNRURPVVQnLFxuICAnRVJSX05FVFdPUksnLFxuICAnRVJSX0ZSX1RPT19NQU5ZX1JFRElSRUNUUycsXG4gICdFUlJfREVQUkVDQVRFRCcsXG4gICdFUlJfQkFEX1JFU1BPTlNFJyxcbiAgJ0VSUl9CQURfUkVRVUVTVCcsXG4gICdFUlJfQ0FOQ0VMRUQnLFxuICAnRVJSX05PVF9TVVBQT1JUJyxcbiAgJ0VSUl9JTlZBTElEX1VSTCdcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5dLmZvckVhY2goY29kZSA9PiB7XG4gIGRlc2NyaXB0b3JzW2NvZGVdID0ge3ZhbHVlOiBjb2RlfTtcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhBeGlvc0Vycm9yLCBkZXNjcmlwdG9ycyk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlJDEsICdpc0F4aW9zRXJyb3InLCB7dmFsdWU6IHRydWV9KTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbkF4aW9zRXJyb3IuZnJvbSA9IChlcnJvciwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSwgY3VzdG9tUHJvcHMpID0+IHtcbiAgY29uc3QgYXhpb3NFcnJvciA9IE9iamVjdC5jcmVhdGUocHJvdG90eXBlJDEpO1xuXG4gIHV0aWxzLnRvRmxhdE9iamVjdChlcnJvciwgYXhpb3NFcnJvciwgZnVuY3Rpb24gZmlsdGVyKG9iaikge1xuICAgIHJldHVybiBvYmogIT09IEVycm9yLnByb3RvdHlwZTtcbiAgfSwgcHJvcCA9PiB7XG4gICAgcmV0dXJuIHByb3AgIT09ICdpc0F4aW9zRXJyb3InO1xuICB9KTtcblxuICBBeGlvc0Vycm9yLmNhbGwoYXhpb3NFcnJvciwgZXJyb3IubWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSk7XG5cbiAgYXhpb3NFcnJvci5jYXVzZSA9IGVycm9yO1xuXG4gIGF4aW9zRXJyb3IubmFtZSA9IGVycm9yLm5hbWU7XG5cbiAgY3VzdG9tUHJvcHMgJiYgT2JqZWN0LmFzc2lnbihheGlvc0Vycm9yLCBjdXN0b21Qcm9wcyk7XG5cbiAgcmV0dXJuIGF4aW9zRXJyb3I7XG59O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc3RyaWN0XG52YXIgaHR0cEFkYXB0ZXIgPSBudWxsO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGdpdmVuIHRoaW5nIGlzIGEgYXJyYXkgb3IganMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0aGluZyAtIFRoZSBvYmplY3Qgb3IgYXJyYXkgdG8gYmUgdmlzaXRlZC5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNWaXNpdGFibGUodGhpbmcpIHtcbiAgcmV0dXJuIHV0aWxzLmlzUGxhaW5PYmplY3QodGhpbmcpIHx8IHV0aWxzLmlzQXJyYXkodGhpbmcpO1xufVxuXG4vKipcbiAqIEl0IHJlbW92ZXMgdGhlIGJyYWNrZXRzIGZyb20gdGhlIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBwYXJhbWV0ZXIuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gdGhlIGtleSB3aXRob3V0IHRoZSBicmFja2V0cy5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQnJhY2tldHMoa2V5KSB7XG4gIHJldHVybiB1dGlscy5lbmRzV2l0aChrZXksICdbXScpID8ga2V5LnNsaWNlKDAsIC0yKSA6IGtleTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhdGgsIGEga2V5LCBhbmQgYSBib29sZWFuLCBhbmQgcmV0dXJucyBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIGN1cnJlbnQgb2JqZWN0IGJlaW5nIGl0ZXJhdGVkIG92ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gZG90cyAtIElmIHRydWUsIHRoZSBrZXkgd2lsbCBiZSByZW5kZXJlZCB3aXRoIGRvdHMgaW5zdGVhZCBvZiBicmFja2V0cy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcGF0aCB0byB0aGUgY3VycmVudCBrZXkuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpIHtcbiAgaWYgKCFwYXRoKSByZXR1cm4ga2V5O1xuICByZXR1cm4gcGF0aC5jb25jYXQoa2V5KS5tYXAoZnVuY3Rpb24gZWFjaCh0b2tlbiwgaSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHRva2VuID0gcmVtb3ZlQnJhY2tldHModG9rZW4pO1xuICAgIHJldHVybiAhZG90cyAmJiBpID8gJ1snICsgdG9rZW4gKyAnXScgOiB0b2tlbjtcbiAgfSkuam9pbihkb3RzID8gJy4nIDogJycpO1xufVxuXG4vKipcbiAqIElmIHRoZSBhcnJheSBpcyBhbiBhcnJheSBhbmQgbm9uZSBvZiBpdHMgZWxlbWVudHMgYXJlIHZpc2l0YWJsZSwgdGhlbiBpdCdzIGEgZmxhdCBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjaGVja1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZsYXRBcnJheShhcnIpIHtcbiAgcmV0dXJuIHV0aWxzLmlzQXJyYXkoYXJyKSAmJiAhYXJyLnNvbWUoaXNWaXNpdGFibGUpO1xufVxuXG5jb25zdCBwcmVkaWNhdGVzID0gdXRpbHMudG9GbGF0T2JqZWN0KHV0aWxzLCB7fSwgbnVsbCwgZnVuY3Rpb24gZmlsdGVyKHByb3ApIHtcbiAgcmV0dXJuIC9eaXNbQS1aXS8udGVzdChwcm9wKTtcbn0pO1xuXG4vKipcbiAqIENvbnZlcnQgYSBkYXRhIG9iamVjdCB0byBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7P09iamVjdH0gW2Zvcm1EYXRhXVxuICogQHBhcmFtIHs/T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLnZpc2l0b3JdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm1ldGFUb2tlbnMgPSB0cnVlXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5kb3RzID0gZmFsc2VdXG4gKiBAcGFyYW0gez9Cb29sZWFufSBbb3B0aW9ucy5pbmRleGVzID0gZmFsc2VdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqKi9cblxuLyoqXG4gKiBJdCBjb252ZXJ0cyBhbiBvYmplY3QgaW50byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PGFueSwgYW55Pn0gb2JqIC0gVGhlIG9iamVjdCB0byBjb252ZXJ0IHRvIGZvcm0gZGF0YS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSAtIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gYXBwZW5kIHRvLlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zXG4gKlxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gdG9Gb3JtRGF0YShvYmosIGZvcm1EYXRhLCBvcHRpb25zKSB7XG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RhcmdldCBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGZvcm1EYXRhID0gZm9ybURhdGEgfHwgbmV3IChGb3JtRGF0YSkoKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgb3B0aW9ucyA9IHV0aWxzLnRvRmxhdE9iamVjdChvcHRpb25zLCB7XG4gICAgbWV0YVRva2VuczogdHJ1ZSxcbiAgICBkb3RzOiBmYWxzZSxcbiAgICBpbmRleGVzOiBmYWxzZVxuICB9LCBmYWxzZSwgZnVuY3Rpb24gZGVmaW5lZChvcHRpb24sIHNvdXJjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICAgIHJldHVybiAhdXRpbHMuaXNVbmRlZmluZWQoc291cmNlW29wdGlvbl0pO1xuICB9KTtcblxuICBjb25zdCBtZXRhVG9rZW5zID0gb3B0aW9ucy5tZXRhVG9rZW5zO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgY29uc3QgdmlzaXRvciA9IG9wdGlvbnMudmlzaXRvciB8fCBkZWZhdWx0VmlzaXRvcjtcbiAgY29uc3QgZG90cyA9IG9wdGlvbnMuZG90cztcbiAgY29uc3QgaW5kZXhlcyA9IG9wdGlvbnMuaW5kZXhlcztcbiAgY29uc3QgX0Jsb2IgPSBvcHRpb25zLkJsb2IgfHwgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIEJsb2I7XG4gIGNvbnN0IHVzZUJsb2IgPSBfQmxvYiAmJiB1dGlscy5pc1NwZWNDb21wbGlhbnRGb3JtKGZvcm1EYXRhKTtcblxuICBpZiAoIXV0aWxzLmlzRnVuY3Rpb24odmlzaXRvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2aXNpdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udmVydFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJyc7XG5cbiAgICBpZiAodXRpbHMuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKCF1c2VCbG9iICYmIHV0aWxzLmlzQmxvYih2YWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdCbG9iIGlzIG5vdCBzdXBwb3J0ZWQuIFVzZSBhIEJ1ZmZlciBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKHZhbHVlKSB8fCB1dGlscy5pc1R5cGVkQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdXNlQmxvYiAmJiB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBCbG9iKFt2YWx1ZV0pIDogQnVmZmVyLmZyb20odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IHZpc2l0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXlcbiAgICogQHBhcmFtIHtBcnJheTxTdHJpbmd8TnVtYmVyPn0gcGF0aFxuICAgKiBAdGhpcyB7Rm9ybURhdGF9XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm4gdHJ1ZSB0byB2aXNpdCB0aGUgZWFjaCBwcm9wIG9mIHRoZSB2YWx1ZSByZWN1cnNpdmVseVxuICAgKi9cbiAgZnVuY3Rpb24gZGVmYXVsdFZpc2l0b3IodmFsdWUsIGtleSwgcGF0aCkge1xuICAgIGxldCBhcnIgPSB2YWx1ZTtcblxuICAgIGlmICh2YWx1ZSAmJiAhcGF0aCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAodXRpbHMuZW5kc1dpdGgoa2V5LCAne30nKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gbWV0YVRva2VucyA/IGtleSA6IGtleS5zbGljZSgwLCAtMik7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICh1dGlscy5pc0FycmF5KHZhbHVlKSAmJiBpc0ZsYXRBcnJheSh2YWx1ZSkpIHx8XG4gICAgICAgICgodXRpbHMuaXNGaWxlTGlzdCh2YWx1ZSkgfHwgdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSkgJiYgKGFyciA9IHV0aWxzLnRvQXJyYXkodmFsdWUpKVxuICAgICAgICApKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSByZW1vdmVCcmFja2V0cyhrZXkpO1xuXG4gICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIGVhY2goZWwsIGluZGV4KSB7XG4gICAgICAgICAgISh1dGlscy5pc1VuZGVmaW5lZChlbCkgfHwgZWwgPT09IG51bGwpICYmIGZvcm1EYXRhLmFwcGVuZChcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgICAgICAgICAgaW5kZXhlcyA9PT0gdHJ1ZSA/IHJlbmRlcktleShba2V5XSwgaW5kZXgsIGRvdHMpIDogKGluZGV4ZXMgPT09IG51bGwgPyBrZXkgOiBrZXkgKyAnW10nKSxcbiAgICAgICAgICAgIGNvbnZlcnRWYWx1ZShlbClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1Zpc2l0YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZvcm1EYXRhLmFwcGVuZChyZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSwgY29udmVydFZhbHVlKHZhbHVlKSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBzdGFjayA9IFtdO1xuXG4gIGNvbnN0IGV4cG9zZWRIZWxwZXJzID0gT2JqZWN0LmFzc2lnbihwcmVkaWNhdGVzLCB7XG4gICAgZGVmYXVsdFZpc2l0b3IsXG4gICAgY29udmVydFZhbHVlLFxuICAgIGlzVmlzaXRhYmxlXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGJ1aWxkKHZhbHVlLCBwYXRoKSB7XG4gICAgaWYgKHV0aWxzLmlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgaWYgKHN0YWNrLmluZGV4T2YodmFsdWUpICE9PSAtMSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBkZXRlY3RlZCBpbiAnICsgcGF0aC5qb2luKCcuJykpO1xuICAgIH1cblxuICAgIHN0YWNrLnB1c2godmFsdWUpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24gZWFjaChlbCwga2V5KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgdmlzaXRvci5jYWxsKFxuICAgICAgICBmb3JtRGF0YSwgZWwsIHV0aWxzLmlzU3RyaW5nKGtleSkgPyBrZXkudHJpbSgpIDoga2V5LCBwYXRoLCBleHBvc2VkSGVscGVyc1xuICAgICAgKTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICBidWlsZChlbCwgcGF0aCA/IHBhdGguY29uY2F0KGtleSkgOiBba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzdGFjay5wb3AoKTtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGEgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIGJ1aWxkKG9iaik7XG5cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuXG4vKipcbiAqIEl0IGVuY29kZXMgYSBzdHJpbmcgYnkgcmVwbGFjaW5nIGFsbCBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBpbiB0aGUgdW5yZXNlcnZlZCBzZXQgd2l0aFxuICogdGhlaXIgcGVyY2VudC1lbmNvZGVkIGVxdWl2YWxlbnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gZW5jb2RlLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlJDEoc3RyKSB7XG4gIGNvbnN0IGNoYXJNYXAgPSB7XG4gICAgJyEnOiAnJTIxJyxcbiAgICBcIidcIjogJyUyNycsXG4gICAgJygnOiAnJTI4JyxcbiAgICAnKSc6ICclMjknLFxuICAgICd+JzogJyU3RScsXG4gICAgJyUyMCc6ICcrJyxcbiAgICAnJTAwJzogJ1xceDAwJ1xuICB9O1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZSgvWyEnKCl+XXwlMjB8JTAwL2csIGZ1bmN0aW9uIHJlcGxhY2VyKG1hdGNoKSB7XG4gICAgcmV0dXJuIGNoYXJNYXBbbWF0Y2hdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhcmFtcyBvYmplY3QgYW5kIGNvbnZlcnRzIGl0IHRvIGEgRm9ybURhdGEgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBwYXJhbXMgLSBUaGUgcGFyYW1ldGVycyB0byBiZSBjb252ZXJ0ZWQgdG8gYSBGb3JtRGF0YSBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgcGFzc2VkIHRvIHRoZSBBeGlvcyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKSB7XG4gIHRoaXMuX3BhaXJzID0gW107XG5cbiAgcGFyYW1zICYmIHRvRm9ybURhdGEocGFyYW1zLCB0aGlzLCBvcHRpb25zKTtcbn1cblxuY29uc3QgcHJvdG90eXBlID0gQXhpb3NVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlO1xuXG5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gYXBwZW5kKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMuX3BhaXJzLnB1c2goW25hbWUsIHZhbHVlXSk7XG59O1xuXG5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhlbmNvZGVyKSB7XG4gIGNvbnN0IF9lbmNvZGUgPSBlbmNvZGVyID8gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZW5jb2Rlci5jYWxsKHRoaXMsIHZhbHVlLCBlbmNvZGUkMSk7XG4gIH0gOiBlbmNvZGUkMTtcblxuICByZXR1cm4gdGhpcy5fcGFpcnMubWFwKGZ1bmN0aW9uIGVhY2gocGFpcikge1xuICAgIHJldHVybiBfZW5jb2RlKHBhaXJbMF0pICsgJz0nICsgX2VuY29kZShwYWlyWzFdKTtcbiAgfSwgJycpLmpvaW4oJyYnKTtcbn07XG5cbi8qKlxuICogSXQgcmVwbGFjZXMgYWxsIGluc3RhbmNlcyBvZiB0aGUgY2hhcmFjdGVycyBgOmAsIGAkYCwgYCxgLCBgK2AsIGBbYCwgYW5kIGBdYCB3aXRoIHRoZWlyXG4gKiBVUkkgZW5jb2RlZCBjb3VudGVycGFydHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsIFRoZSB2YWx1ZSB0byBiZSBlbmNvZGVkLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHBhcmFtIHs/b2JqZWN0fSBvcHRpb25zXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xuZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBcbiAgY29uc3QgX2VuY29kZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5lbmNvZGUgfHwgZW5jb2RlO1xuXG4gIGNvbnN0IHNlcmlhbGl6ZUZuID0gb3B0aW9ucyAmJiBvcHRpb25zLnNlcmlhbGl6ZTtcblxuICBsZXQgc2VyaWFsaXplZFBhcmFtcztcblxuICBpZiAoc2VyaWFsaXplRm4pIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gc2VyaWFsaXplRm4ocGFyYW1zLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gdXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSA/XG4gICAgICBwYXJhbXMudG9TdHJpbmcoKSA6XG4gICAgICBuZXcgQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKS50b1N0cmluZyhfZW5jb2RlKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgY29uc3QgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKFwiI1wiKTtcblxuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufVxuXG5jbGFzcyBJbnRlcmNlcHRvck1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAgICovXG4gIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gICAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICAgIGZ1bGZpbGxlZCxcbiAgICAgIHJlamVjdGVkLFxuICAgICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAgICpcbiAgICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgaW50ZXJjZXB0b3Igd2FzIHJlbW92ZWQsIGBmYWxzZWAgb3RoZXJ3aXNlXG4gICAqL1xuICBlamVjdChpZCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgaW50ZXJjZXB0b3JzIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnMpIHtcbiAgICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAgICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZm9yRWFjaChmbikge1xuICAgIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgICAgZm4oaCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxudmFyIEludGVyY2VwdG9yTWFuYWdlciQxID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuXG52YXIgdHJhbnNpdGlvbmFsRGVmYXVsdHMgPSB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG5cbnZhciBVUkxTZWFyY2hQYXJhbXMkMSA9IHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnID8gVVJMU2VhcmNoUGFyYW1zIDogQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG5cbnZhciBGb3JtRGF0YSQxID0gdHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJyA/IEZvcm1EYXRhIDogbnVsbDtcblxudmFyIEJsb2IkMSA9IHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyA/IEJsb2IgOiBudWxsO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgaXNTdGFuZGFyZEJyb3dzZXJFbnYgPSAoKCkgPT4ge1xuICBsZXQgcHJvZHVjdDtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChcbiAgICAocHJvZHVjdCA9IG5hdmlnYXRvci5wcm9kdWN0KSA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgIHByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgcHJvZHVjdCA9PT0gJ05TJylcbiAgKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG59KSgpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciB3ZWJXb3JrZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBBbHRob3VnaCB0aGUgYGlzU3RhbmRhcmRCcm93c2VyRW52YCBtZXRob2QgaW5kaWNhdGVzIHRoYXRcbiAqIGBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlcmAsIHRoZSBXZWJXb3JrZXIgd2lsbCBzdGlsbCBiZVxuICogZmlsdGVyZWQgb3V0IGR1ZSB0byBpdHMganVkZ21lbnQgc3RhbmRhcmRcbiAqIGB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnYC5cbiAqIFRoaXMgbGVhZHMgdG8gYSBwcm9ibGVtIHdoZW4gYXhpb3MgcG9zdCBgRm9ybURhdGFgIGluIHdlYldvcmtlclxuICovXG4gY29uc3QgaXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYgPSAoKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICBzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGUgJiZcbiAgICB0eXBlb2Ygc2VsZi5pbXBvcnRTY3JpcHRzID09PSAnZnVuY3Rpb24nXG4gICk7XG59KSgpO1xuXG5cbnZhciBwbGF0Zm9ybSA9IHtcbiAgaXNCcm93c2VyOiB0cnVlLFxuICBjbGFzc2VzOiB7XG4gICAgVVJMU2VhcmNoUGFyYW1zOiBVUkxTZWFyY2hQYXJhbXMkMSxcbiAgICBGb3JtRGF0YTogRm9ybURhdGEkMSxcbiAgICBCbG9iOiBCbG9iJDFcbiAgfSxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGlzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52LFxuICBwcm90b2NvbHM6IFsnaHR0cCcsICdodHRwcycsICdmaWxlJywgJ2Jsb2InLCAndXJsJywgJ2RhdGEnXVxufTtcblxuZnVuY3Rpb24gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b0Zvcm1EYXRhKGRhdGEsIG5ldyBwbGF0Zm9ybS5jbGFzc2VzLlVSTFNlYXJjaFBhcmFtcygpLCBPYmplY3QuYXNzaWduKHtcbiAgICB2aXNpdG9yOiBmdW5jdGlvbih2YWx1ZSwga2V5LCBwYXRoLCBoZWxwZXJzKSB7XG4gICAgICBpZiAocGxhdGZvcm0uaXNOb2RlICYmIHV0aWxzLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICB0aGlzLmFwcGVuZChrZXksIHZhbHVlLnRvU3RyaW5nKCdiYXNlNjQnKSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhlbHBlcnMuZGVmYXVsdFZpc2l0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH0sIG9wdGlvbnMpKTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZyBsaWtlIGBmb29beF1beV1bel1gIGFuZCByZXR1cm5zIGFuIGFycmF5IGxpa2UgYFsnZm9vJywgJ3gnLCAneScsICd6J11cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKlxuICogQHJldHVybnMgQW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqL1xuZnVuY3Rpb24gcGFyc2VQcm9wUGF0aChuYW1lKSB7XG4gIC8vIGZvb1t4XVt5XVt6XVxuICAvLyBmb28ueC55LnpcbiAgLy8gZm9vLXgteS16XG4gIC8vIGZvbyB4IHkgelxuICByZXR1cm4gdXRpbHMubWF0Y2hBbGwoL1xcdyt8XFxbKFxcdyopXS9nLCBuYW1lKS5tYXAobWF0Y2ggPT4ge1xuICAgIHJldHVybiBtYXRjaFswXSA9PT0gJ1tdJyA/ICcnIDogbWF0Y2hbMV0gfHwgbWF0Y2hbMF07XG4gIH0pO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gYXJyYXkgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNvbnZlcnQgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYW5kIHZhbHVlcyBhcyB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9PYmplY3QoYXJyKSB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYXJyKTtcbiAgbGV0IGk7XG4gIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICBsZXQga2V5O1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIG9ialtrZXldID0gYXJyW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIEZvcm1EYXRhIG9iamVjdCBhbmQgcmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gY29udmVydCB0byBKU09OLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBhbnk+IHwgbnVsbH0gVGhlIGNvbnZlcnRlZCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGZvcm1EYXRhVG9KU09OKGZvcm1EYXRhKSB7XG4gIGZ1bmN0aW9uIGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0LCBpbmRleCkge1xuICAgIGxldCBuYW1lID0gcGF0aFtpbmRleCsrXTtcbiAgICBjb25zdCBpc051bWVyaWNLZXkgPSBOdW1iZXIuaXNGaW5pdGUoK25hbWUpO1xuICAgIGNvbnN0IGlzTGFzdCA9IGluZGV4ID49IHBhdGgubGVuZ3RoO1xuICAgIG5hbWUgPSAhbmFtZSAmJiB1dGlscy5pc0FycmF5KHRhcmdldCkgPyB0YXJnZXQubGVuZ3RoIDogbmFtZTtcblxuICAgIGlmIChpc0xhc3QpIHtcbiAgICAgIGlmICh1dGlscy5oYXNPd25Qcm9wKHRhcmdldCwgbmFtZSkpIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gW3RhcmdldFtuYW1lXSwgdmFsdWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0W25hbWVdIHx8ICF1dGlscy5pc09iamVjdCh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldFtuYW1lXSwgaW5kZXgpO1xuXG4gICAgaWYgKHJlc3VsdCAmJiB1dGlscy5pc0FycmF5KHRhcmdldFtuYW1lXSkpIHtcbiAgICAgIHRhcmdldFtuYW1lXSA9IGFycmF5VG9PYmplY3QodGFyZ2V0W25hbWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc0Zvcm1EYXRhKGZvcm1EYXRhKSAmJiB1dGlscy5pc0Z1bmN0aW9uKGZvcm1EYXRhLmVudHJpZXMpKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG5cbiAgICB1dGlscy5mb3JFYWNoRW50cnkoZm9ybURhdGEsIChuYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgYnVpbGRQYXRoKHBhcnNlUHJvcFBhdGgobmFtZSksIHZhbHVlLCBvYmosIDApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5jb25zdCBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZFxufTtcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZywgdHJpZXMgdG8gcGFyc2UgaXQsIGFuZCBpZiBpdCBmYWlscywgaXQgcmV0dXJucyB0aGUgc3RyaW5naWZpZWQgdmVyc2lvblxuICogb2YgdGhlIGlucHV0XG4gKlxuICogQHBhcmFtIHthbnl9IHJhd1ZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIHN0cmluZ2lmaWVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcGFyc2VyIC0gQSBmdW5jdGlvbiB0aGF0IHBhcnNlcyBhIHN0cmluZyBpbnRvIGEgSmF2YVNjcmlwdCBvYmplY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlbmNvZGVyIC0gQSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgdmFsdWUgYW5kIHJldHVybnMgYSBzdHJpbmcuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmdpZmllZCB2ZXJzaW9uIG9mIHRoZSByYXdWYWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RyaW5naWZ5U2FmZWx5KHJhd1ZhbHVlLCBwYXJzZXIsIGVuY29kZXIpIHtcbiAgaWYgKHV0aWxzLmlzU3RyaW5nKHJhd1ZhbHVlKSkge1xuICAgIHRyeSB7XG4gICAgICAocGFyc2VyIHx8IEpTT04ucGFyc2UpKHJhd1ZhbHVlKTtcbiAgICAgIHJldHVybiB1dGlscy50cmltKHJhd1ZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5uYW1lICE9PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChlbmNvZGVyIHx8IEpTT04uc3RyaW5naWZ5KShyYXdWYWx1ZSk7XG59XG5cbmNvbnN0IGRlZmF1bHRzID0ge1xuXG4gIHRyYW5zaXRpb25hbDogdHJhbnNpdGlvbmFsRGVmYXVsdHMsXG5cbiAgYWRhcHRlcjogWyd4aHInLCAnaHR0cCddLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IGhlYWRlcnMuZ2V0Q29udGVudFR5cGUoKSB8fCAnJztcbiAgICBjb25zdCBoYXNKU09OQ29udGVudFR5cGUgPSBjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi9qc29uJykgPiAtMTtcbiAgICBjb25zdCBpc09iamVjdFBheWxvYWQgPSB1dGlscy5pc09iamVjdChkYXRhKTtcblxuICAgIGlmIChpc09iamVjdFBheWxvYWQgJiYgdXRpbHMuaXNIVE1MRm9ybShkYXRhKSkge1xuICAgICAgZGF0YSA9IG5ldyBGb3JtRGF0YShkYXRhKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0Zvcm1EYXRhID0gdXRpbHMuaXNGb3JtRGF0YShkYXRhKTtcblxuICAgIGlmIChpc0Zvcm1EYXRhKSB7XG4gICAgICBpZiAoIWhhc0pTT05Db250ZW50VHlwZSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNKU09OQ29udGVudFR5cGUgPyBKU09OLnN0cmluZ2lmeShmb3JtRGF0YVRvSlNPTihkYXRhKSkgOiBkYXRhO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnLCBmYWxzZSk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGxldCBpc0ZpbGVMaXN0O1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCkge1xuICAgICAgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgdGhpcy5mb3JtU2VyaWFsaXplcikudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKChpc0ZpbGVMaXN0ID0gdXRpbHMuaXNGaWxlTGlzdChkYXRhKSkgfHwgY29udGVudFR5cGUuaW5kZXhPZignbXVsdGlwYXJ0L2Zvcm0tZGF0YScpID4gLTEpIHtcbiAgICAgICAgY29uc3QgX0Zvcm1EYXRhID0gdGhpcy5lbnYgJiYgdGhpcy5lbnYuRm9ybURhdGE7XG5cbiAgICAgICAgcmV0dXJuIHRvRm9ybURhdGEoXG4gICAgICAgICAgaXNGaWxlTGlzdCA/IHsnZmlsZXNbXSc6IGRhdGF9IDogZGF0YSxcbiAgICAgICAgICBfRm9ybURhdGEgJiYgbmV3IF9Gb3JtRGF0YSgpLFxuICAgICAgICAgIHRoaXMuZm9ybVNlcmlhbGl6ZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkIHx8IGhhc0pTT05Db250ZW50VHlwZSApIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL2pzb24nLCBmYWxzZSk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSB0aGlzLnRyYW5zaXRpb25hbCB8fCBkZWZhdWx0cy50cmFuc2l0aW9uYWw7XG4gICAgY29uc3QgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIGNvbnN0IEpTT05SZXF1ZXN0ZWQgPSB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKGRhdGEgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgKChmb3JjZWRKU09OUGFyc2luZyAmJiAhdGhpcy5yZXNwb25zZVR5cGUpIHx8IEpTT05SZXF1ZXN0ZWQpKSB7XG4gICAgICBjb25zdCBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgICBjb25zdCBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiBKU09OUmVxdWVzdGVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGUsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgdGhpcywgbnVsbCwgdGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIGVudjoge1xuICAgIEZvcm1EYXRhOiBwbGF0Zm9ybS5jbGFzc2VzLkZvcm1EYXRhLFxuICAgIEJsb2I6IHBsYXRmb3JtLmNsYXNzZXMuQmxvYlxuICB9LFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gICAgfVxuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG52YXIgZGVmYXVsdHMkMSA9IGRlZmF1bHRzO1xuXG4vLyBSYXdBeGlvc0hlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG5jb25zdCBpZ25vcmVEdXBsaWNhdGVPZiA9IHV0aWxzLnRvT2JqZWN0U2V0KFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dKTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJhd0hlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbnZhciBwYXJzZUhlYWRlcnMgPSByYXdIZWFkZXJzID0+IHtcbiAgY29uc3QgcGFyc2VkID0ge307XG4gIGxldCBrZXk7XG4gIGxldCB2YWw7XG4gIGxldCBpO1xuXG4gIHJhd0hlYWRlcnMgJiYgcmF3SGVhZGVycy5zcGxpdCgnXFxuJykuZm9yRWFjaChmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSBsaW5lLnN1YnN0cmluZygwLCBpKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSBsaW5lLnN1YnN0cmluZyhpICsgMSkudHJpbSgpO1xuXG4gICAgaWYgKCFrZXkgfHwgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mW2tleV0pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0pIHtcbiAgICAgICAgcGFyc2VkW2tleV0ucHVzaCh2YWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBbdmFsXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuXG5jb25zdCAkaW50ZXJuYWxzID0gU3ltYm9sKCdpbnRlcm5hbHMnKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyKGhlYWRlcikge1xuICByZXR1cm4gaGVhZGVyICYmIFN0cmluZyhoZWFkZXIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdXRpbHMuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAobm9ybWFsaXplVmFsdWUpIDogU3RyaW5nKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUb2tlbnMoc3RyKSB7XG4gIGNvbnN0IHRva2VucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IHRva2Vuc1JFID0gLyhbXlxccyw7PV0rKVxccyooPzo9XFxzKihbXiw7XSspKT8vZztcbiAgbGV0IG1hdGNoO1xuXG4gIHdoaWxlICgobWF0Y2ggPSB0b2tlbnNSRS5leGVjKHN0cikpKSB7XG4gICAgdG9rZW5zW21hdGNoWzFdXSA9IG1hdGNoWzJdO1xuICB9XG5cbiAgcmV0dXJuIHRva2Vucztcbn1cblxuZnVuY3Rpb24gaXNWYWxpZEhlYWRlck5hbWUoc3RyKSB7XG4gIHJldHVybiAvXlstX2EtekEtWl0rJC8udGVzdChzdHIudHJpbSgpKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hIZWFkZXJWYWx1ZShjb250ZXh0LCB2YWx1ZSwgaGVhZGVyLCBmaWx0ZXIsIGlzSGVhZGVyTmFtZUZpbHRlcikge1xuICBpZiAodXRpbHMuaXNGdW5jdGlvbihmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci5jYWxsKHRoaXMsIHZhbHVlLCBoZWFkZXIpO1xuICB9XG5cbiAgaWYgKGlzSGVhZGVyTmFtZUZpbHRlcikge1xuICAgIHZhbHVlID0gaGVhZGVyO1xuICB9XG5cbiAgaWYgKCF1dGlscy5pc1N0cmluZyh2YWx1ZSkpIHJldHVybjtcblxuICBpZiAodXRpbHMuaXNTdHJpbmcoZmlsdGVyKSkge1xuICAgIHJldHVybiB2YWx1ZS5pbmRleE9mKGZpbHRlcikgIT09IC0xO1xuICB9XG5cbiAgaWYgKHV0aWxzLmlzUmVnRXhwKGZpbHRlcikpIHtcbiAgICByZXR1cm4gZmlsdGVyLnRlc3QodmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhlYWRlcihoZWFkZXIpIHtcbiAgcmV0dXJuIGhlYWRlci50cmltKClcbiAgICAudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8oW2EtelxcZF0pKFxcdyopL2csICh3LCBjaGFyLCBzdHIpID0+IHtcbiAgICAgIHJldHVybiBjaGFyLnRvVXBwZXJDYXNlKCkgKyBzdHI7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkQWNjZXNzb3JzKG9iaiwgaGVhZGVyKSB7XG4gIGNvbnN0IGFjY2Vzc29yTmFtZSA9IHV0aWxzLnRvQ2FtZWxDYXNlKCcgJyArIGhlYWRlcik7XG5cbiAgWydnZXQnLCAnc2V0JywgJ2hhcyddLmZvckVhY2gobWV0aG9kTmFtZSA9PiB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbWV0aG9kTmFtZSArIGFjY2Vzc29yTmFtZSwge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbbWV0aG9kTmFtZV0uY2FsbCh0aGlzLCBoZWFkZXIsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgICAgfSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9KTtcbn1cblxuY2xhc3MgQXhpb3NIZWFkZXJzIHtcbiAgY29uc3RydWN0b3IoaGVhZGVycykge1xuICAgIGhlYWRlcnMgJiYgdGhpcy5zZXQoaGVhZGVycyk7XG4gIH1cblxuICBzZXQoaGVhZGVyLCB2YWx1ZU9yUmV3cml0ZSwgcmV3cml0ZSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgZnVuY3Rpb24gc2V0SGVhZGVyKF92YWx1ZSwgX2hlYWRlciwgX3Jld3JpdGUpIHtcbiAgICAgIGNvbnN0IGxIZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmICghbEhlYWRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hlYWRlciBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoc2VsZiwgbEhlYWRlcik7XG5cbiAgICAgIGlmKCFrZXkgfHwgc2VsZltrZXldID09PSB1bmRlZmluZWQgfHwgX3Jld3JpdGUgPT09IHRydWUgfHwgKF9yZXdyaXRlID09PSB1bmRlZmluZWQgJiYgc2VsZltrZXldICE9PSBmYWxzZSkpIHtcbiAgICAgICAgc2VsZltrZXkgfHwgX2hlYWRlcl0gPSBub3JtYWxpemVWYWx1ZShfdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHNldEhlYWRlcnMgPSAoaGVhZGVycywgX3Jld3JpdGUpID0+XG4gICAgICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIChfdmFsdWUsIF9oZWFkZXIpID0+IHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSk7XG5cbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChoZWFkZXIpIHx8IGhlYWRlciBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IpIHtcbiAgICAgIHNldEhlYWRlcnMoaGVhZGVyLCB2YWx1ZU9yUmV3cml0ZSk7XG4gICAgfSBlbHNlIGlmKHV0aWxzLmlzU3RyaW5nKGhlYWRlcikgJiYgKGhlYWRlciA9IGhlYWRlci50cmltKCkpICYmICFpc1ZhbGlkSGVhZGVyTmFtZShoZWFkZXIpKSB7XG4gICAgICBzZXRIZWFkZXJzKHBhcnNlSGVhZGVycyhoZWFkZXIpLCB2YWx1ZU9yUmV3cml0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWRlciAhPSBudWxsICYmIHNldEhlYWRlcih2YWx1ZU9yUmV3cml0ZSwgaGVhZGVyLCByZXdyaXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldChoZWFkZXIsIHBhcnNlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1trZXldO1xuXG4gICAgICAgIGlmICghcGFyc2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZVRva2Vucyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5jYWxsKHRoaXMsIHZhbHVlLCBrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzUmVnRXhwKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmV4ZWModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyc2VyIG11c3QgYmUgYm9vbGVhbnxyZWdleHB8ZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYXMoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIHJldHVybiAhIShrZXkgJiYgdGhpc1trZXldICE9PSB1bmRlZmluZWQgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZGVsZXRlKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBkZWxldGVIZWFkZXIoX2hlYWRlcikge1xuICAgICAgX2hlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKF9oZWFkZXIpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShzZWxmLCBfaGVhZGVyKTtcblxuICAgICAgICBpZiAoa2V5ICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHNlbGYsIHNlbGZba2V5XSwga2V5LCBtYXRjaGVyKSkpIHtcbiAgICAgICAgICBkZWxldGUgc2VsZltrZXldO1xuXG4gICAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheShoZWFkZXIpKSB7XG4gICAgICBoZWFkZXIuZm9yRWFjaChkZWxldGVIZWFkZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGVIZWFkZXIoaGVhZGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIGNsZWFyKG1hdGNoZXIpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gICAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIsIHRydWUpKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgbm9ybWFsaXplKGZvcm1hdCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcblxuICAgIHV0aWxzLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoaGVhZGVycywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBzZWxmW2tleV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IGZvcm1hdCA/IGZvcm1hdEhlYWRlcihoZWFkZXIpIDogU3RyaW5nKGhlYWRlcikudHJpbSgpO1xuXG4gICAgICBpZiAobm9ybWFsaXplZCAhPT0gaGVhZGVyKSB7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICB9XG5cbiAgICAgIHNlbGZbbm9ybWFsaXplZF0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZF0gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb25jYXQoLi4udGFyZ2V0cykge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmNvbmNhdCh0aGlzLCAuLi50YXJnZXRzKTtcbiAgfVxuXG4gIHRvSlNPTihhc1N0cmluZ3MpIHtcbiAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPT0gZmFsc2UgJiYgKG9ialtoZWFkZXJdID0gYXNTdHJpbmdzICYmIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCAnKSA6IHZhbHVlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSlbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpLm1hcCgoW2hlYWRlciwgdmFsdWVdKSA9PiBoZWFkZXIgKyAnOiAnICsgdmFsdWUpLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnQXhpb3NIZWFkZXJzJztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tKHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgdGhpcyA/IHRoaW5nIDogbmV3IHRoaXModGhpbmcpO1xuICB9XG5cbiAgc3RhdGljIGNvbmNhdChmaXJzdCwgLi4udGFyZ2V0cykge1xuICAgIGNvbnN0IGNvbXB1dGVkID0gbmV3IHRoaXMoZmlyc3QpO1xuXG4gICAgdGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQpID0+IGNvbXB1dGVkLnNldCh0YXJnZXQpKTtcblxuICAgIHJldHVybiBjb21wdXRlZDtcbiAgfVxuXG4gIHN0YXRpYyBhY2Nlc3NvcihoZWFkZXIpIHtcbiAgICBjb25zdCBpbnRlcm5hbHMgPSB0aGlzWyRpbnRlcm5hbHNdID0gKHRoaXNbJGludGVybmFsc10gPSB7XG4gICAgICBhY2Nlc3NvcnM6IHt9XG4gICAgfSk7XG5cbiAgICBjb25zdCBhY2Nlc3NvcnMgPSBpbnRlcm5hbHMuYWNjZXNzb3JzO1xuICAgIGNvbnN0IHByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuXG4gICAgZnVuY3Rpb24gZGVmaW5lQWNjZXNzb3IoX2hlYWRlcikge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFhY2Nlc3NvcnNbbEhlYWRlcl0pIHtcbiAgICAgICAgYnVpbGRBY2Nlc3NvcnMocHJvdG90eXBlLCBfaGVhZGVyKTtcbiAgICAgICAgYWNjZXNzb3JzW2xIZWFkZXJdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlscy5pc0FycmF5KGhlYWRlcikgPyBoZWFkZXIuZm9yRWFjaChkZWZpbmVBY2Nlc3NvcikgOiBkZWZpbmVBY2Nlc3NvcihoZWFkZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuQXhpb3NIZWFkZXJzLmFjY2Vzc29yKFsnQ29udGVudC1UeXBlJywgJ0NvbnRlbnQtTGVuZ3RoJywgJ0FjY2VwdCcsICdBY2NlcHQtRW5jb2RpbmcnLCAnVXNlci1BZ2VudCcsICdBdXRob3JpemF0aW9uJ10pO1xuXG51dGlscy5mcmVlemVNZXRob2RzKEF4aW9zSGVhZGVycy5wcm90b3R5cGUpO1xudXRpbHMuZnJlZXplTWV0aG9kcyhBeGlvc0hlYWRlcnMpO1xuXG52YXIgQXhpb3NIZWFkZXJzJDEgPSBBeGlvc0hlYWRlcnM7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7P09iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlIG9iamVjdFxuICpcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShmbnMsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IGNvbmZpZyA9IHRoaXMgfHwgZGVmYXVsdHMkMTtcbiAgY29uc3QgY29udGV4dCA9IHJlc3BvbnNlIHx8IGNvbmZpZztcbiAgY29uc3QgaGVhZGVycyA9IEF4aW9zSGVhZGVycyQxLmZyb20oY29udGV4dC5oZWFkZXJzKTtcbiAgbGV0IGRhdGEgPSBjb250ZXh0LmRhdGE7XG5cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbi5jYWxsKGNvbmZpZywgZGF0YSwgaGVhZGVycy5ub3JtYWxpemUoKSwgcmVzcG9uc2UgPyByZXNwb25zZS5zdGF0dXMgOiB1bmRlZmluZWQpO1xuICB9KTtcblxuICBoZWFkZXJzLm5vcm1hbGl6ZSgpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59XG5cbi8qKlxuICogQSBgQ2FuY2VsZWRFcnJvcmAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge09iamVjdD19IHJlcXVlc3QgVGhlIHJlcXVlc3QuXG4gKlxuICogQHJldHVybnMge0NhbmNlbGVkRXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgQXhpb3NFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UgPT0gbnVsbCA/ICdjYW5jZWxlZCcgOiBtZXNzYWdlLCBBeGlvc0Vycm9yLkVSUl9DQU5DRUxFRCwgY29uZmlnLCByZXF1ZXN0KTtcbiAgdGhpcy5uYW1lID0gJ0NhbmNlbGVkRXJyb3InO1xufVxuXG51dGlscy5pbmhlcml0cyhDYW5jZWxlZEVycm9yLCBBeGlvc0Vycm9yLCB7XG4gIF9fQ0FOQ0VMX186IHRydWVcbn0pO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSByZXNwb25zZS5cbiAqL1xuZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgY29uc3QgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIFtBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFXVtNYXRoLmZsb29yKHJlc3BvbnNlLnN0YXR1cyAvIDEwMCkgLSA0XSxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59XG5cbnZhciBjb29raWVzID0gcGxhdGZvcm0uaXNTdGFuZGFyZEJyb3dzZXJFbnYgP1xuXG4vLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICBjb25zdCBjb29raWUgPSBbXTtcbiAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICBjb25zdCBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkoKSA6XG5cbi8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9KSgpO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZCtcXC0uXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbmZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xuZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59XG5cbnZhciBpc1VSTFNhbWVPcmlnaW4gPSBwbGF0Zm9ybS5pc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbi8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgY29uc3QgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgY29uc3QgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgbGV0IG9yaWdpblVSTDtcblxuICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICBsZXQgaHJlZiA9IHVybDtcblxuICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICB9XG5cbiAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICByZXR1cm4ge1xuICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgY29uc3QgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKTtcblxuZnVuY3Rpb24gcGFyc2VQcm90b2NvbCh1cmwpIHtcbiAgY29uc3QgbWF0Y2ggPSAvXihbLStcXHddezEsMjV9KSg6P1xcL1xcL3w6KS8uZXhlYyh1cmwpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgJyc7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlIGRhdGEgbWF4UmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtzYW1wbGVzQ291bnQ9IDEwXVxuICogQHBhcmFtIHtOdW1iZXJ9IFttaW49IDEwMDBdXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHNwZWVkb21ldGVyKHNhbXBsZXNDb3VudCwgbWluKSB7XG4gIHNhbXBsZXNDb3VudCA9IHNhbXBsZXNDb3VudCB8fCAxMDtcbiAgY29uc3QgYnl0ZXMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgY29uc3QgdGltZXN0YW1wcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBsZXQgaGVhZCA9IDA7XG4gIGxldCB0YWlsID0gMDtcbiAgbGV0IGZpcnN0U2FtcGxlVFM7XG5cbiAgbWluID0gbWluICE9PSB1bmRlZmluZWQgPyBtaW4gOiAxMDAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiBwdXNoKGNodW5rTGVuZ3RoKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgIGNvbnN0IHN0YXJ0ZWRBdCA9IHRpbWVzdGFtcHNbdGFpbF07XG5cbiAgICBpZiAoIWZpcnN0U2FtcGxlVFMpIHtcbiAgICAgIGZpcnN0U2FtcGxlVFMgPSBub3c7XG4gICAgfVxuXG4gICAgYnl0ZXNbaGVhZF0gPSBjaHVua0xlbmd0aDtcbiAgICB0aW1lc3RhbXBzW2hlYWRdID0gbm93O1xuXG4gICAgbGV0IGkgPSB0YWlsO1xuICAgIGxldCBieXRlc0NvdW50ID0gMDtcblxuICAgIHdoaWxlIChpICE9PSBoZWFkKSB7XG4gICAgICBieXRlc0NvdW50ICs9IGJ5dGVzW2krK107XG4gICAgICBpID0gaSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBoZWFkID0gKGhlYWQgKyAxKSAlIHNhbXBsZXNDb3VudDtcblxuICAgIGlmIChoZWFkID09PSB0YWlsKSB7XG4gICAgICB0YWlsID0gKHRhaWwgKyAxKSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBpZiAobm93IC0gZmlyc3RTYW1wbGVUUyA8IG1pbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhc3NlZCA9IHN0YXJ0ZWRBdCAmJiBub3cgLSBzdGFydGVkQXQ7XG5cbiAgICByZXR1cm4gcGFzc2VkID8gTWF0aC5yb3VuZChieXRlc0NvdW50ICogMTAwMCAvIHBhc3NlZCkgOiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGxpc3RlbmVyLCBpc0Rvd25sb2FkU3RyZWFtKSB7XG4gIGxldCBieXRlc05vdGlmaWVkID0gMDtcbiAgY29uc3QgX3NwZWVkb21ldGVyID0gc3BlZWRvbWV0ZXIoNTAsIDI1MCk7XG5cbiAgcmV0dXJuIGUgPT4ge1xuICAgIGNvbnN0IGxvYWRlZCA9IGUubG9hZGVkO1xuICAgIGNvbnN0IHRvdGFsID0gZS5sZW5ndGhDb21wdXRhYmxlID8gZS50b3RhbCA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBwcm9ncmVzc0J5dGVzID0gbG9hZGVkIC0gYnl0ZXNOb3RpZmllZDtcbiAgICBjb25zdCByYXRlID0gX3NwZWVkb21ldGVyKHByb2dyZXNzQnl0ZXMpO1xuICAgIGNvbnN0IGluUmFuZ2UgPSBsb2FkZWQgPD0gdG90YWw7XG5cbiAgICBieXRlc05vdGlmaWVkID0gbG9hZGVkO1xuXG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIGxvYWRlZCxcbiAgICAgIHRvdGFsLFxuICAgICAgcHJvZ3Jlc3M6IHRvdGFsID8gKGxvYWRlZCAvIHRvdGFsKSA6IHVuZGVmaW5lZCxcbiAgICAgIGJ5dGVzOiBwcm9ncmVzc0J5dGVzLFxuICAgICAgcmF0ZTogcmF0ZSA/IHJhdGUgOiB1bmRlZmluZWQsXG4gICAgICBlc3RpbWF0ZWQ6IHJhdGUgJiYgdG90YWwgJiYgaW5SYW5nZSA/ICh0b3RhbCAtIGxvYWRlZCkgLyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgZXZlbnQ6IGVcbiAgICB9O1xuXG4gICAgZGF0YVtpc0Rvd25sb2FkU3RyZWFtID8gJ2Rvd25sb2FkJyA6ICd1cGxvYWQnXSA9IHRydWU7XG5cbiAgICBsaXN0ZW5lcihkYXRhKTtcbiAgfTtcbn1cblxuY29uc3QgaXNYSFJBZGFwdGVyU3VwcG9ydGVkID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJztcblxudmFyIHhockFkYXB0ZXIgPSBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgJiYgZnVuY3Rpb24gKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIGxldCByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIGNvbnN0IHJlcXVlc3RIZWFkZXJzID0gQXhpb3NIZWFkZXJzJDEuZnJvbShjb25maWcuaGVhZGVycykubm9ybWFsaXplKCk7XG4gICAgY29uc3QgcmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICBsZXQgb25DYW5jZWxlZDtcbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgICBjb25maWcuY2FuY2VsVG9rZW4udW5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkgJiYgKHBsYXRmb3JtLmlzU3RhbmRhcmRCcm93c2VyRW52IHx8IHBsYXRmb3JtLmlzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52KSkge1xuICAgICAgcmVxdWVzdEhlYWRlcnMuc2V0Q29udGVudFR5cGUoZmFsc2UpOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgbGV0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIGNvbnN0IHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICBjb25zdCBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGNvbmZpZy5hdXRoLnBhc3N3b3JkKSkgOiAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLnNldCgnQXV0aG9yaXphdGlvbicsICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKSk7XG4gICAgfVxuXG4gICAgY29uc3QgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcblxuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgY29uc3QgcmVzcG9uc2VIZWFkZXJzID0gQXhpb3NIZWFkZXJzJDEuZnJvbShcbiAgICAgICAgJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCAmJiByZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG4gICAgICApO1xuICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gIXJlc3BvbnNlVHlwZSB8fCByZXNwb25zZVR5cGUgPT09ICd0ZXh0JyB8fCByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgZnVuY3Rpb24gX3JlamVjdChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignTmV0d29yayBFcnJvcicsIEF4aW9zRXJyb3IuRVJSX05FVFdPUkssIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICBsZXQgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyA6ICd0aW1lb3V0IGV4Y2VlZGVkJztcbiAgICAgIGNvbnN0IHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWwgfHwgdHJhbnNpdGlvbmFsRGVmYXVsdHM7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlLFxuICAgICAgICB0cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/IEF4aW9zRXJyb3IuRVRJTUVET1VUIDogQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAocGxhdGZvcm0uaXNTdGFuZGFyZEJyb3dzZXJFbnYpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgY29uc3QgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSlcbiAgICAgICAgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lICYmIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzLnNldChjb25maWcueHNyZkhlYWRlck5hbWUsIHhzcmZWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgIHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQgJiYgcmVxdWVzdEhlYWRlcnMuc2V0Q29udGVudFR5cGUobnVsbCk7XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycy50b0pTT04oKSwgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAocmVzcG9uc2VUeXBlICYmIHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MsIHRydWUpKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgcHJvZ3Jlc3NFdmVudFJlZHVjZXIoY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuIHx8IGNvbmZpZy5zaWduYWwpIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBvbkNhbmNlbGVkID0gY2FuY2VsID0+IHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdCghY2FuY2VsIHx8IGNhbmNlbC50eXBlID8gbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnLCByZXF1ZXN0KSA6IGNhbmNlbCk7XG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4gJiYgY29uZmlnLmNhbmNlbFRva2VuLnN1YnNjcmliZShvbkNhbmNlbGVkKTtcbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwuYWJvcnRlZCA/IG9uQ2FuY2VsZWQoKSA6IGNvbmZpZy5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBwcm90b2NvbCA9IHBhcnNlUHJvdG9jb2woZnVsbFBhdGgpO1xuXG4gICAgaWYgKHByb3RvY29sICYmIHBsYXRmb3JtLnByb3RvY29scy5pbmRleE9mKHByb3RvY29sKSA9PT0gLTEpIHtcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignVW5zdXBwb3J0ZWQgcHJvdG9jb2wgJyArIHByb3RvY29sICsgJzonLCBBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgY29uZmlnKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhIHx8IG51bGwpO1xuICB9KTtcbn07XG5cbmNvbnN0IGtub3duQWRhcHRlcnMgPSB7XG4gIGh0dHA6IGh0dHBBZGFwdGVyLFxuICB4aHI6IHhockFkYXB0ZXJcbn07XG5cbnV0aWxzLmZvckVhY2goa25vd25BZGFwdGVycywgKGZuLCB2YWx1ZSkgPT4ge1xuICBpZihmbikge1xuICAgIHRyeSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICduYW1lJywge3ZhbHVlfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ2FkYXB0ZXJOYW1lJywge3ZhbHVlfSk7XG4gIH1cbn0pO1xuXG52YXIgYWRhcHRlcnMgPSB7XG4gIGdldEFkYXB0ZXI6IChhZGFwdGVycykgPT4ge1xuICAgIGFkYXB0ZXJzID0gdXRpbHMuaXNBcnJheShhZGFwdGVycykgPyBhZGFwdGVycyA6IFthZGFwdGVyc107XG5cbiAgICBjb25zdCB7bGVuZ3RofSA9IGFkYXB0ZXJzO1xuICAgIGxldCBuYW1lT3JBZGFwdGVyO1xuICAgIGxldCBhZGFwdGVyO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgbmFtZU9yQWRhcHRlciA9IGFkYXB0ZXJzW2ldO1xuICAgICAgaWYoKGFkYXB0ZXIgPSB1dGlscy5pc1N0cmluZyhuYW1lT3JBZGFwdGVyKSA/IGtub3duQWRhcHRlcnNbbmFtZU9yQWRhcHRlci50b0xvd2VyQ2FzZSgpXSA6IG5hbWVPckFkYXB0ZXIpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghYWRhcHRlcikge1xuICAgICAgaWYgKGFkYXB0ZXIgPT09IGZhbHNlKSB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICAgIGBBZGFwdGVyICR7bmFtZU9yQWRhcHRlcn0gaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgZW52aXJvbm1lbnRgLFxuICAgICAgICAgICdFUlJfTk9UX1NVUFBPUlQnXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgdXRpbHMuaGFzT3duUHJvcChrbm93bkFkYXB0ZXJzLCBuYW1lT3JBZGFwdGVyKSA/XG4gICAgICAgICAgYEFkYXB0ZXIgJyR7bmFtZU9yQWRhcHRlcn0nIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGJ1aWxkYCA6XG4gICAgICAgICAgYFVua25vd24gYWRhcHRlciAnJHtuYW1lT3JBZGFwdGVyfSdgXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghdXRpbHMuaXNGdW5jdGlvbihhZGFwdGVyKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYWRhcHRlciBpcyBub3QgYSBmdW5jdGlvbicpO1xuICAgIH1cblxuICAgIHJldHVybiBhZGFwdGVyO1xuICB9LFxuICBhZGFwdGVyczoga25vd25BZGFwdGVyc1xufTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxuXG4gIGlmIChjb25maWcuc2lnbmFsICYmIGNvbmZpZy5zaWduYWwuYWJvcnRlZCkge1xuICAgIHRocm93IG5ldyBDYW5jZWxlZEVycm9yKG51bGwsIGNvbmZpZyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKlxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5mdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICBjb25maWcuaGVhZGVycyA9IEF4aW9zSGVhZGVycyQxLmZyb20oY29uZmlnLmhlYWRlcnMpO1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgaWYgKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXS5pbmRleE9mKGNvbmZpZy5tZXRob2QpICE9PSAtMSkge1xuICAgIGNvbmZpZy5oZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLCBmYWxzZSk7XG4gIH1cblxuICBjb25zdCBhZGFwdGVyID0gYWRhcHRlcnMuZ2V0QWRhcHRlcihjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cyQxLmFkYXB0ZXIpO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgcmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycyQxLmZyb20ocmVzcG9uc2UuaGVhZGVycyk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzID0gQXhpb3NIZWFkZXJzJDEuZnJvbShyZWFzb24ucmVzcG9uc2UuaGVhZGVycyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufVxuXG5jb25zdCBoZWFkZXJzVG9PYmplY3QgPSAodGhpbmcpID0+IHRoaW5nIGluc3RhbmNlb2YgQXhpb3NIZWFkZXJzJDEgPyB0aGluZy50b0pTT04oKSA6IHRoaW5nO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICBjb25zdCBjb25maWcgPSB7fTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSwgY2FzZWxlc3MpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlLmNhbGwoe2Nhc2VsZXNzfSwgdGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKGEsIGIsIGNhc2VsZXNzKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIsIGNhc2VsZXNzKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChhKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSwgY2FzZWxlc3MpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKGEsIGIpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihhLCBiKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYik7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURpcmVjdEtleXMoYSwgYiwgcHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShhLCBiKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgbWVyZ2VNYXAgPSB7XG4gICAgdXJsOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIG1ldGhvZDogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBkYXRhOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIGJhc2VVUkw6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNmb3JtUmVxdWVzdDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc2Zvcm1SZXNwb25zZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBwYXJhbXNTZXJpYWxpemVyOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRpbWVvdXQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdGltZW91dE1lc3NhZ2U6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgd2l0aENyZWRlbnRpYWxzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGFkYXB0ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcmVzcG9uc2VUeXBlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHhzcmZDb29raWVOYW1lOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHhzcmZIZWFkZXJOYW1lOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uVXBsb2FkUHJvZ3Jlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgb25Eb3dubG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGRlY29tcHJlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Q29udGVudExlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBtYXhCb2R5TGVuZ3RoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGJlZm9yZVJlZGlyZWN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zcG9ydDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBodHRwQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cHNBZ2VudDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBjYW5jZWxUb2tlbjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBzb2NrZXRQYXRoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlRW5jb2Rpbmc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdmFsaWRhdGVTdGF0dXM6IG1lcmdlRGlyZWN0S2V5cyxcbiAgICBoZWFkZXJzOiAoYSwgYikgPT4gbWVyZ2VEZWVwUHJvcGVydGllcyhoZWFkZXJzVG9PYmplY3QoYSksIGhlYWRlcnNUb09iamVjdChiKSwgdHJ1ZSlcbiAgfTtcblxuICB1dGlscy5mb3JFYWNoKE9iamVjdC5rZXlzKGNvbmZpZzEpLmNvbmNhdChPYmplY3Qua2V5cyhjb25maWcyKSksIGZ1bmN0aW9uIGNvbXB1dGVDb25maWdWYWx1ZShwcm9wKSB7XG4gICAgY29uc3QgbWVyZ2UgPSBtZXJnZU1hcFtwcm9wXSB8fCBtZXJnZURlZXBQcm9wZXJ0aWVzO1xuICAgIGNvbnN0IGNvbmZpZ1ZhbHVlID0gbWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSwgcHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufVxuXG5jb25zdCBWRVJTSU9OID0gXCIxLjMuNFwiO1xuXG5jb25zdCB2YWxpZGF0b3JzJDEgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKCh0eXBlLCBpKSA9PiB7XG4gIHZhbGlkYXRvcnMkMVt0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbmNvbnN0IGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yIC0gc2V0IHRvIGZhbHNlIGlmIHRoZSB0cmFuc2l0aW9uYWwgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvbiAtIGRlcHJlY2F0ZWQgdmVyc2lvbiAvIHJlbW92ZWQgc2luY2UgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSBtZXNzYWdlIC0gc29tZSBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBpbmZvXG4gKlxuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzJDEudHJhbnNpdGlvbmFsID0gZnVuY3Rpb24gdHJhbnNpdGlvbmFsKHZhbGlkYXRvciwgdmVyc2lvbiwgbWVzc2FnZSkge1xuICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCwgZGVzYykge1xuICAgIHJldHVybiAnW0F4aW9zIHYnICsgVkVSU0lPTiArICddIFRyYW5zaXRpb25hbCBvcHRpb24gXFwnJyArIG9wdCArICdcXCcnICsgZGVzYyArIChtZXNzYWdlID8gJy4gJyArIG1lc3NhZ2UgOiAnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gKHZhbHVlLCBvcHQsIG9wdHMpID0+IHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQnICsgKHZlcnNpb24gPyAnIGluICcgKyB2ZXJzaW9uIDogJycpKSxcbiAgICAgICAgQXhpb3NFcnJvci5FUlJfREVQUkVDQVRFRFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnLCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgfVxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgY29uc3Qgb3B0ID0ga2V5c1tpXTtcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT04pO1xuICAgIH1cbiAgfVxufVxuXG52YXIgdmFsaWRhdG9yID0ge1xuICBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzOiB2YWxpZGF0b3JzJDFcbn07XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuY2xhc3MgQXhpb3Mge1xuICBjb25zdHJ1Y3RvcihpbnN0YW5jZUNvbmZpZykge1xuICAgIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIkMSgpLFxuICAgICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIkMSgpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBjb25maWdPclVybCBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gICAqIEBwYXJhbSB7P09iamVjdH0gY29uZmlnXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAgICovXG4gIHJlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgICBpZiAodHlwZW9mIGNvbmZpZ09yVXJsID09PSAnc3RyaW5nJykge1xuICAgICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgICAgY29uZmlnLnVybCA9IGNvbmZpZ09yVXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25maWcgPSBjb25maWdPclVybCB8fCB7fTtcbiAgICB9XG5cbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gICAgY29uc3Qge3RyYW5zaXRpb25hbCwgcGFyYW1zU2VyaWFsaXplciwgaGVhZGVyc30gPSBjb25maWc7XG5cbiAgICBpZiAodHJhbnNpdGlvbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHRyYW5zaXRpb25hbCwge1xuICAgICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgICAgZm9yY2VkSlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbilcbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zU2VyaWFsaXplciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyhwYXJhbXNTZXJpYWxpemVyLCB7XG4gICAgICAgIGVuY29kZTogdmFsaWRhdG9ycy5mdW5jdGlvbixcbiAgICAgICAgc2VyaWFsaXplOiB2YWxpZGF0b3JzLmZ1bmN0aW9uXG4gICAgICB9LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICAgIGNvbmZpZy5tZXRob2QgPSAoY29uZmlnLm1ldGhvZCB8fCB0aGlzLmRlZmF1bHRzLm1ldGhvZCB8fCAnZ2V0JykudG9Mb3dlckNhc2UoKTtcblxuICAgIGxldCBjb250ZXh0SGVhZGVycztcblxuICAgIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICAgIGNvbnRleHRIZWFkZXJzID0gaGVhZGVycyAmJiB1dGlscy5tZXJnZShcbiAgICAgIGhlYWRlcnMuY29tbW9uLFxuICAgICAgaGVhZGVyc1tjb25maWcubWV0aG9kXVxuICAgICk7XG5cbiAgICBjb250ZXh0SGVhZGVycyAmJiB1dGlscy5mb3JFYWNoKFxuICAgICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgICAobWV0aG9kKSA9PiB7XG4gICAgICAgIGRlbGV0ZSBoZWFkZXJzW21ldGhvZF07XG4gICAgICB9XG4gICAgKTtcblxuICAgIGNvbmZpZy5oZWFkZXJzID0gQXhpb3NIZWFkZXJzJDEuY29uY2F0KGNvbnRleHRIZWFkZXJzLCBoZWFkZXJzKTtcblxuICAgIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgICBjb25zdCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIGxldCBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvci5ydW5XaGVuID09PSAnZnVuY3Rpb24nICYmIGludGVyY2VwdG9yLnJ1bldoZW4oY29uZmlnKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgJiYgaW50ZXJjZXB0b3Iuc3luY2hyb25vdXM7XG5cbiAgICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBsZXQgcHJvbWlzZTtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGxlbjtcblxuICAgIGlmICghc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzKSB7XG4gICAgICBjb25zdCBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QuYmluZCh0aGlzKSwgdW5kZWZpbmVkXTtcbiAgICAgIGNoYWluLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGNoYWluLnB1c2guYXBwbHkoY2hhaW4sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG4gICAgICBsZW4gPSBjaGFpbi5sZW5ndGg7XG5cbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbltpKytdLCBjaGFpbltpKytdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG4gICAgbGVuID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgbGV0IG5ld0NvbmZpZyA9IGNvbmZpZztcblxuICAgIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGNvbnN0IG9uRnVsZmlsbGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW5baSsrXTtcbiAgICAgIGNvbnN0IG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIG9uUmVqZWN0ZWQuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBwcm9taXNlID0gZGlzcGF0Y2hSZXF1ZXN0LmNhbGwodGhpcywgbmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICBpID0gMDtcbiAgICBsZW4gPSByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbltpKytdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGdldFVyaShjb25maWcpIHtcbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICAgIGNvbnN0IGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmV0dXJuIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG4gIH1cbn1cblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2QsXG4gICAgICB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVIVFRQTWV0aG9kKGlzRm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBodHRwTWV0aG9kKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnM6IGlzRm9ybSA/IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnXG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgdXJsLFxuICAgICAgICBkYXRhXG4gICAgICB9KSk7XG4gICAgfTtcbiAgfVxuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZ2VuZXJhdGVIVFRQTWV0aG9kKCk7XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZCArICdGb3JtJ10gPSBnZW5lcmF0ZUhUVFBNZXRob2QodHJ1ZSk7XG59KTtcblxudmFyIEF4aW9zJDEgPSBBeGlvcztcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsVG9rZW59XG4gKi9cbmNsYXNzIENhbmNlbFRva2VuIHtcbiAgY29uc3RydWN0b3IoZXhlY3V0b3IpIHtcbiAgICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgbGV0IHJlc29sdmVQcm9taXNlO1xuXG4gICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHRva2VuID0gdGhpcztcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdGhpcy5wcm9taXNlLnRoZW4oY2FuY2VsID0+IHtcbiAgICAgIGlmICghdG9rZW4uX2xpc3RlbmVycykgcmV0dXJuO1xuXG4gICAgICBsZXQgaSA9IHRva2VuLl9saXN0ZW5lcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICB0b2tlbi5fbGlzdGVuZXJzW2ldKGNhbmNlbCk7XG4gICAgICB9XG4gICAgICB0b2tlbi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgICB9KTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdGhpcy5wcm9taXNlLnRoZW4gPSBvbmZ1bGZpbGxlZCA9PiB7XG4gICAgICBsZXQgX3Jlc29sdmU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICB0b2tlbi5zdWJzY3JpYmUocmVzb2x2ZSk7XG4gICAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIH0pLnRoZW4ob25mdWxmaWxsZWQpO1xuXG4gICAgICBwcm9taXNlLmNhbmNlbCA9IGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICAgICAgdG9rZW4udW5zdWJzY3JpYmUoX3Jlc29sdmUpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfTtcblxuICAgIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpIHtcbiAgICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KTtcbiAgICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gICAqL1xuICB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICAgIGlmICh0aGlzLnJlYXNvbikge1xuICAgICAgdGhyb3cgdGhpcy5yZWFzb247XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICAgKi9cblxuICBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIGxpc3RlbmVyKHRoaXMucmVhc29uKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycyA9IFtsaXN0ZW5lcl07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVuc3Vic2NyaWJlIGZyb20gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAoIXRoaXMuX2xpc3RlbmVycykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICAgKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICAgKi9cbiAgc3RhdGljIHNvdXJjZSgpIHtcbiAgICBsZXQgY2FuY2VsO1xuICAgIGNvbnN0IHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICAgIGNhbmNlbCA9IGM7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRva2VuLFxuICAgICAgY2FuY2VsXG4gICAgfTtcbiAgfVxufVxuXG52YXIgQ2FuY2VsVG9rZW4kMSA9IENhbmNlbFRva2VuO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KHBheWxvYWQpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59XG5cbmNvbnN0IEh0dHBTdGF0dXNDb2RlID0ge1xuICBDb250aW51ZTogMTAwLFxuICBTd2l0Y2hpbmdQcm90b2NvbHM6IDEwMSxcbiAgUHJvY2Vzc2luZzogMTAyLFxuICBFYXJseUhpbnRzOiAxMDMsXG4gIE9rOiAyMDAsXG4gIENyZWF0ZWQ6IDIwMSxcbiAgQWNjZXB0ZWQ6IDIwMixcbiAgTm9uQXV0aG9yaXRhdGl2ZUluZm9ybWF0aW9uOiAyMDMsXG4gIE5vQ29udGVudDogMjA0LFxuICBSZXNldENvbnRlbnQ6IDIwNSxcbiAgUGFydGlhbENvbnRlbnQ6IDIwNixcbiAgTXVsdGlTdGF0dXM6IDIwNyxcbiAgQWxyZWFkeVJlcG9ydGVkOiAyMDgsXG4gIEltVXNlZDogMjI2LFxuICBNdWx0aXBsZUNob2ljZXM6IDMwMCxcbiAgTW92ZWRQZXJtYW5lbnRseTogMzAxLFxuICBGb3VuZDogMzAyLFxuICBTZWVPdGhlcjogMzAzLFxuICBOb3RNb2RpZmllZDogMzA0LFxuICBVc2VQcm94eTogMzA1LFxuICBVbnVzZWQ6IDMwNixcbiAgVGVtcG9yYXJ5UmVkaXJlY3Q6IDMwNyxcbiAgUGVybWFuZW50UmVkaXJlY3Q6IDMwOCxcbiAgQmFkUmVxdWVzdDogNDAwLFxuICBVbmF1dGhvcml6ZWQ6IDQwMSxcbiAgUGF5bWVudFJlcXVpcmVkOiA0MDIsXG4gIEZvcmJpZGRlbjogNDAzLFxuICBOb3RGb3VuZDogNDA0LFxuICBNZXRob2ROb3RBbGxvd2VkOiA0MDUsXG4gIE5vdEFjY2VwdGFibGU6IDQwNixcbiAgUHJveHlBdXRoZW50aWNhdGlvblJlcXVpcmVkOiA0MDcsXG4gIFJlcXVlc3RUaW1lb3V0OiA0MDgsXG4gIENvbmZsaWN0OiA0MDksXG4gIEdvbmU6IDQxMCxcbiAgTGVuZ3RoUmVxdWlyZWQ6IDQxMSxcbiAgUHJlY29uZGl0aW9uRmFpbGVkOiA0MTIsXG4gIFBheWxvYWRUb29MYXJnZTogNDEzLFxuICBVcmlUb29Mb25nOiA0MTQsXG4gIFVuc3VwcG9ydGVkTWVkaWFUeXBlOiA0MTUsXG4gIFJhbmdlTm90U2F0aXNmaWFibGU6IDQxNixcbiAgRXhwZWN0YXRpb25GYWlsZWQ6IDQxNyxcbiAgSW1BVGVhcG90OiA0MTgsXG4gIE1pc2RpcmVjdGVkUmVxdWVzdDogNDIxLFxuICBVbnByb2Nlc3NhYmxlRW50aXR5OiA0MjIsXG4gIExvY2tlZDogNDIzLFxuICBGYWlsZWREZXBlbmRlbmN5OiA0MjQsXG4gIFRvb0Vhcmx5OiA0MjUsXG4gIFVwZ3JhZGVSZXF1aXJlZDogNDI2LFxuICBQcmVjb25kaXRpb25SZXF1aXJlZDogNDI4LFxuICBUb29NYW55UmVxdWVzdHM6IDQyOSxcbiAgUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlOiA0MzEsXG4gIFVuYXZhaWxhYmxlRm9yTGVnYWxSZWFzb25zOiA0NTEsXG4gIEludGVybmFsU2VydmVyRXJyb3I6IDUwMCxcbiAgTm90SW1wbGVtZW50ZWQ6IDUwMSxcbiAgQmFkR2F0ZXdheTogNTAyLFxuICBTZXJ2aWNlVW5hdmFpbGFibGU6IDUwMyxcbiAgR2F0ZXdheVRpbWVvdXQ6IDUwNCxcbiAgSHR0cFZlcnNpb25Ob3RTdXBwb3J0ZWQ6IDUwNSxcbiAgVmFyaWFudEFsc29OZWdvdGlhdGVzOiA1MDYsXG4gIEluc3VmZmljaWVudFN0b3JhZ2U6IDUwNyxcbiAgTG9vcERldGVjdGVkOiA1MDgsXG4gIE5vdEV4dGVuZGVkOiA1MTAsXG4gIE5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkOiA1MTEsXG59O1xuXG5PYmplY3QuZW50cmllcyhIdHRwU3RhdHVzQ29kZSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gIEh0dHBTdGF0dXNDb2RlW3ZhbHVlXSA9IGtleTtcbn0pO1xuXG52YXIgSHR0cFN0YXR1c0NvZGUkMSA9IEh0dHBTdGF0dXNDb2RlO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKlxuICogQHJldHVybnMge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIGNvbnN0IGNvbnRleHQgPSBuZXcgQXhpb3MkMShkZWZhdWx0Q29uZmlnKTtcbiAgY29uc3QgaW5zdGFuY2UgPSBiaW5kKEF4aW9zJDEucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MkMS5wcm90b3R5cGUsIGNvbnRleHQsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCwgbnVsbCwge2FsbE93bktleXM6IHRydWV9KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG5jb25zdCBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzJDEpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3MkMTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWxlZEVycm9yID0gQ2FuY2VsZWRFcnJvcjtcbmF4aW9zLkNhbmNlbFRva2VuID0gQ2FuY2VsVG9rZW4kMTtcbmF4aW9zLmlzQ2FuY2VsID0gaXNDYW5jZWw7XG5heGlvcy5WRVJTSU9OID0gVkVSU0lPTjtcbmF4aW9zLnRvRm9ybURhdGEgPSB0b0Zvcm1EYXRhO1xuXG4vLyBFeHBvc2UgQXhpb3NFcnJvciBjbGFzc1xuYXhpb3MuQXhpb3NFcnJvciA9IEF4aW9zRXJyb3I7XG5cbi8vIGFsaWFzIGZvciBDYW5jZWxlZEVycm9yIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5heGlvcy5DYW5jZWwgPSBheGlvcy5DYW5jZWxlZEVycm9yO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuXG5heGlvcy5zcHJlYWQgPSBzcHJlYWQ7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IGlzQXhpb3NFcnJvcjtcblxuLy8gRXhwb3NlIG1lcmdlQ29uZmlnXG5heGlvcy5tZXJnZUNvbmZpZyA9IG1lcmdlQ29uZmlnO1xuXG5heGlvcy5BeGlvc0hlYWRlcnMgPSBBeGlvc0hlYWRlcnMkMTtcblxuYXhpb3MuZm9ybVRvSlNPTiA9IHRoaW5nID0+IGZvcm1EYXRhVG9KU09OKHV0aWxzLmlzSFRNTEZvcm0odGhpbmcpID8gbmV3IEZvcm1EYXRhKHRoaW5nKSA6IHRoaW5nKTtcblxuYXhpb3MuSHR0cFN0YXR1c0NvZGUgPSBIdHRwU3RhdHVzQ29kZSQxO1xuXG5heGlvcy5kZWZhdWx0ID0gYXhpb3M7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1heGlvcy5janMubWFwXG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNjA3KTtcbiJdLCJuYW1lcyI6WyJlbnYiLCJ0aGlzIiwiZHJhd0xvYWRpbmdTY3JlZW4iLCJzdGFydCIsIm1hcERhdGEiLCJtYXAiLCJkcmF3TWFwIiwiZ2V0TWFwRGF0YSIsInVuZGVmaW5lZCIsIkVycm9yIiwiQXBwIiwiZXJyb3JQaW5rIiwiY2xpZmYiLCJzdGVlcENsaWZmIiwiZGVlcFNlYSIsInNoYWxsb3dTZWEiLCJjb2FzdGFsIiwibG93bGFuZHMiLCJoaWxscyIsImhpZ2hsYW5kcyIsInBlYWtzIiwid2lkdGgiLCJoZWlnaHQiLCJhcHAiLCJFbnZpcm9ubWVudCIsImNvbnRlbnRBcmVhSWQiLCJzdGFnZXMiLCJjb250ZW50QXJlYSIsImxlbmd0aCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsInN0YWdlIiwiQXJyYXkiLCJNYXRoIiwibWluIiwiaSIsImNyZWF0ZUNhbnZhcyIsImNsYXNzQWNjZXNzb3IiLCJlbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJtb3VzZUNsaWNrRXZlbnQiLCJjbGFzc05hbWUiLCJjYW52YXMiLCJjb250ZXh0IiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZCIsImdldENvbnRleHQiLCJkcmF3TWFwTGF5ZXIiLCJkcmF3VUkiLCJjdHgiLCJtYXBYIiwibWFwWSIsImRyYXdXaWR0aCIsImRyYXdIZWlnaHQiLCJpbWFnZURhdGEiLCJnZXRJbWFnZURhdGEiLCJ4IiwicGl4ZWxEYXRhSW5kZXgiLCJ5IiwibWFwUG9pbnQiLCJtYXBQb2ludHMiLCJoZWlnaHROb3JtYWxpemVkIiwibm9ybWFsaXplVmFsdWUiLCJtaW5IZWlnaHQiLCJtYXhIZWlnaHQiLCJjb2xvck1hcCIsImhlaWdodENvbG9yTWFwIiwiZmluZCIsImhlaWdodFJhbmdlIiwiY29sb3IiLCJzdGVlcG5lc3MiLCJpc1dhdGVyIiwic2V0Q29sb3IiLCJwdXRJbWFnZURhdGEiLCJiZWdpblBhdGgiLCJzdGFydFgiLCJzdGFydFkiLCJtb3ZlVG8iLCJsaW5lVG8iLCJmaWxsIiwiaW5kZXgiLCJkYXRhIiwiZ2V0TW91c2VQb3NpdGlvbiIsImV2ZW50IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNjYWxlWCIsInNjYWxlWSIsImNsaWVudFgiLCJsZWZ0IiwiY2xpZW50WSIsInRvcCIsImZvbnQiLCJmaWxsVGV4dCIsIldlYkVudmlyb25tZW50IiwibGFiZWwiLCJJbmZpbml0eSIsImFwcGxpY2F0aW9uIiwicG9zdCIsInRoZW4iLCJyZXNwb25zZSIsImNhdGNoIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwibG9hZEFwcCIsInZhbHVlIiwibWluVmFsdWUiLCJtYXhWYWx1ZSIsImJpbmQiLCJmbiIsInRoaXNBcmciLCJhcHBseSIsImFyZ3VtZW50cyIsInRvU3RyaW5nIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJraW5kT2YiLCJjYWNoZSIsImNyZWF0ZSIsInRoaW5nIiwic3RyIiwiY2FsbCIsInNsaWNlIiwidG9Mb3dlckNhc2UiLCJraW5kT2ZUZXN0IiwidHlwZSIsInR5cGVPZlRlc3QiLCJpc0FycmF5IiwiaXNVbmRlZmluZWQiLCJpc0FycmF5QnVmZmVyIiwiaXNTdHJpbmciLCJpc0Z1bmN0aW9uIiwiaXNOdW1iZXIiLCJpc09iamVjdCIsImlzUGxhaW5PYmplY3QiLCJ2YWwiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsIml0ZXJhdG9yIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNGaWxlTGlzdCIsImlzVVJMU2VhcmNoUGFyYW1zIiwiZm9yRWFjaCIsIm9iaiIsImFsbE93bktleXMiLCJsIiwia2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJsZW4iLCJrZXkiLCJmaW5kS2V5IiwiX2tleSIsIl9nbG9iYWwiLCJnbG9iYWxUaGlzIiwic2VsZiIsIndpbmRvdyIsImciLCJpc0NvbnRleHREZWZpbmVkIiwiaXNUeXBlZEFycmF5IiwiVHlwZWRBcnJheSIsIlVpbnQ4QXJyYXkiLCJpc0hUTUxGb3JtIiwiaGFzT3duUHJvcGVydHkiLCJwcm9wIiwiaXNSZWdFeHAiLCJyZWR1Y2VEZXNjcmlwdG9ycyIsInJlZHVjZXIiLCJkZXNjcmlwdG9ycyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJyZWR1Y2VkRGVzY3JpcHRvcnMiLCJkZXNjcmlwdG9yIiwibmFtZSIsImRlZmluZVByb3BlcnRpZXMiLCJBTFBIQSIsIkRJR0lUIiwiQUxQSEFCRVQiLCJBTFBIQV9ESUdJVCIsInRvVXBwZXJDYXNlIiwidXRpbHMiLCJpc0J1ZmZlciIsImNvbnN0cnVjdG9yIiwiaXNGb3JtRGF0YSIsInBhdHRlcm4iLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwicmVzdWx0IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJpc0Jvb2xlYW4iLCJpc1N0cmVhbSIsInBpcGUiLCJtZXJnZSIsImNhc2VsZXNzIiwiYXNzaWduVmFsdWUiLCJ0YXJnZXRLZXkiLCJleHRlbmQiLCJhIiwiYiIsInRyaW0iLCJyZXBsYWNlIiwic3RyaXBCT00iLCJjb250ZW50IiwiY2hhckNvZGVBdCIsImluaGVyaXRzIiwic3VwZXJDb25zdHJ1Y3RvciIsInByb3BzIiwiZGVmaW5lUHJvcGVydHkiLCJhc3NpZ24iLCJ0b0ZsYXRPYmplY3QiLCJzb3VyY2VPYmoiLCJkZXN0T2JqIiwiZmlsdGVyIiwicHJvcEZpbHRlciIsIm1lcmdlZCIsImVuZHNXaXRoIiwic2VhcmNoU3RyaW5nIiwicG9zaXRpb24iLCJTdHJpbmciLCJsYXN0SW5kZXgiLCJpbmRleE9mIiwidG9BcnJheSIsImFyciIsImZvckVhY2hFbnRyeSIsIm5leHQiLCJkb25lIiwicGFpciIsIm1hdGNoQWxsIiwicmVnRXhwIiwibWF0Y2hlcyIsImV4ZWMiLCJwdXNoIiwiaGFzT3duUHJvcCIsImZyZWV6ZU1ldGhvZHMiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJzZXQiLCJ0b09iamVjdFNldCIsImFycmF5T3JTdHJpbmciLCJkZWxpbWl0ZXIiLCJkZWZpbmUiLCJzcGxpdCIsInRvQ2FtZWxDYXNlIiwibSIsInAxIiwicDIiLCJub29wIiwidG9GaW5pdGVOdW1iZXIiLCJkZWZhdWx0VmFsdWUiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsImdsb2JhbCIsImdlbmVyYXRlU3RyaW5nIiwic2l6ZSIsImFscGhhYmV0IiwicmFuZG9tIiwiaXNTcGVjQ29tcGxpYW50Rm9ybSIsInRvSlNPTk9iamVjdCIsInN0YWNrIiwidmlzaXQiLCJzb3VyY2UiLCJ0YXJnZXQiLCJyZWR1Y2VkVmFsdWUiLCJBeGlvc0Vycm9yIiwibWVzc2FnZSIsImNvZGUiLCJjb25maWciLCJyZXF1ZXN0IiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJ0b0pTT04iLCJkZXNjcmlwdGlvbiIsIm51bWJlciIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsInN0YXR1cyIsInByb3RvdHlwZSQxIiwiaXNWaXNpdGFibGUiLCJyZW1vdmVCcmFja2V0cyIsInJlbmRlcktleSIsInBhdGgiLCJkb3RzIiwiY29uY2F0IiwidG9rZW4iLCJqb2luIiwiZnJvbSIsImN1c3RvbVByb3BzIiwiYXhpb3NFcnJvciIsImNhdXNlIiwicHJlZGljYXRlcyIsInRlc3QiLCJ0b0Zvcm1EYXRhIiwiZm9ybURhdGEiLCJvcHRpb25zIiwiVHlwZUVycm9yIiwibWV0YVRva2VucyIsImluZGV4ZXMiLCJvcHRpb24iLCJ2aXNpdG9yIiwiZGVmYXVsdFZpc2l0b3IiLCJ1c2VCbG9iIiwiQmxvYiIsImNvbnZlcnRWYWx1ZSIsInRvSVNPU3RyaW5nIiwiQnVmZmVyIiwiSlNPTiIsInN0cmluZ2lmeSIsInNvbWUiLCJpc0ZsYXRBcnJheSIsImVsIiwiZXhwb3NlZEhlbHBlcnMiLCJidWlsZCIsInBvcCIsImVuY29kZSQxIiwiY2hhck1hcCIsImVuY29kZVVSSUNvbXBvbmVudCIsIm1hdGNoIiwiQXhpb3NVUkxTZWFyY2hQYXJhbXMiLCJwYXJhbXMiLCJfcGFpcnMiLCJlbmNvZGUiLCJidWlsZFVSTCIsInVybCIsIl9lbmNvZGUiLCJzZXJpYWxpemVGbiIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZWRQYXJhbXMiLCJoYXNobWFya0luZGV4IiwiZW5jb2RlciIsIkludGVyY2VwdG9yTWFuYWdlciQxIiwiaGFuZGxlcnMiLCJ1c2UiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInN5bmNocm9ub3VzIiwicnVuV2hlbiIsImVqZWN0IiwiaWQiLCJjbGVhciIsImgiLCJ0cmFuc2l0aW9uYWxEZWZhdWx0cyIsInNpbGVudEpTT05QYXJzaW5nIiwiZm9yY2VkSlNPTlBhcnNpbmciLCJjbGFyaWZ5VGltZW91dEVycm9yIiwicGxhdGZvcm0iLCJpc0Jyb3dzZXIiLCJjbGFzc2VzIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJwcm9kdWN0IiwibmF2aWdhdG9yIiwiaXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYiLCJXb3JrZXJHbG9iYWxTY29wZSIsImltcG9ydFNjcmlwdHMiLCJwcm90b2NvbHMiLCJmb3JtRGF0YVRvSlNPTiIsImJ1aWxkUGF0aCIsImlzTnVtZXJpY0tleSIsImlzTGFzdCIsImFycmF5VG9PYmplY3QiLCJlbnRyaWVzIiwicGFyc2VQcm9wUGF0aCIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwiZGVmYXVsdHMiLCJ0cmFuc2l0aW9uYWwiLCJhZGFwdGVyIiwidHJhbnNmb3JtUmVxdWVzdCIsImhlYWRlcnMiLCJjb250ZW50VHlwZSIsImdldENvbnRlbnRUeXBlIiwiaGFzSlNPTkNvbnRlbnRUeXBlIiwiaXNPYmplY3RQYXlsb2FkIiwic2V0Q29udGVudFR5cGUiLCJoZWxwZXJzIiwiaXNOb2RlIiwidG9VUkxFbmNvZGVkRm9ybSIsImZvcm1TZXJpYWxpemVyIiwiX0Zvcm1EYXRhIiwicmF3VmFsdWUiLCJwYXJzZXIiLCJwYXJzZSIsInN0cmluZ2lmeVNhZmVseSIsInRyYW5zZm9ybVJlc3BvbnNlIiwiSlNPTlJlcXVlc3RlZCIsInJlc3BvbnNlVHlwZSIsInN0cmljdEpTT05QYXJzaW5nIiwiRVJSX0JBRF9SRVNQT05TRSIsInRpbWVvdXQiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsIm1heEJvZHlMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsImNvbW1vbiIsIm1ldGhvZCIsImRlZmF1bHRzJDEiLCJpZ25vcmVEdXBsaWNhdGVPZiIsIiRpbnRlcm5hbHMiLCJub3JtYWxpemVIZWFkZXIiLCJoZWFkZXIiLCJtYXRjaEhlYWRlclZhbHVlIiwiaXNIZWFkZXJOYW1lRmlsdGVyIiwiQXhpb3NIZWFkZXJzIiwidmFsdWVPclJld3JpdGUiLCJyZXdyaXRlIiwic2V0SGVhZGVyIiwiX3ZhbHVlIiwiX2hlYWRlciIsIl9yZXdyaXRlIiwibEhlYWRlciIsInNldEhlYWRlcnMiLCJyYXdIZWFkZXJzIiwicGFyc2VkIiwibGluZSIsInN1YnN0cmluZyIsInBhcnNlSGVhZGVycyIsImdldCIsInRva2VucyIsInRva2Vuc1JFIiwicGFyc2VUb2tlbnMiLCJoYXMiLCJtYXRjaGVyIiwiZGVsZXRlIiwiZGVsZXRlZCIsImRlbGV0ZUhlYWRlciIsIm5vcm1hbGl6ZSIsImZvcm1hdCIsIm5vcm1hbGl6ZWQiLCJ3IiwiY2hhciIsImZvcm1hdEhlYWRlciIsInRhcmdldHMiLCJhc1N0cmluZ3MiLCJzdGF0aWMiLCJmaXJzdCIsImNvbXB1dGVkIiwiYWNjZXNzb3JzIiwiZGVmaW5lQWNjZXNzb3IiLCJhY2Nlc3Nvck5hbWUiLCJtZXRob2ROYW1lIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiY29uZmlndXJhYmxlIiwiYnVpbGRBY2Nlc3NvcnMiLCJhY2Nlc3NvciIsIkF4aW9zSGVhZGVycyQxIiwidHJhbnNmb3JtRGF0YSIsImZucyIsImlzQ2FuY2VsIiwiX19DQU5DRUxfXyIsIkNhbmNlbGVkRXJyb3IiLCJFUlJfQ0FOQ0VMRUQiLCJjb29raWVzIiwid3JpdGUiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwiRGF0ZSIsInRvR01UU3RyaW5nIiwicmVhZCIsIlJlZ0V4cCIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZSIsIm5vdyIsImJ1aWxkRnVsbFBhdGgiLCJiYXNlVVJMIiwicmVxdWVzdGVkVVJMIiwicmVsYXRpdmVVUkwiLCJjb21iaW5lVVJMcyIsImlzVVJMU2FtZU9yaWdpbiIsIm1zaWUiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsIm9yaWdpblVSTCIsInJlc29sdmVVUkwiLCJocmVmIiwic2V0QXR0cmlidXRlIiwicHJvdG9jb2wiLCJob3N0Iiwic2VhcmNoIiwiaGFzaCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwiY2hhckF0IiwibG9jYXRpb24iLCJyZXF1ZXN0VVJMIiwicHJvZ3Jlc3NFdmVudFJlZHVjZXIiLCJsaXN0ZW5lciIsImlzRG93bmxvYWRTdHJlYW0iLCJieXRlc05vdGlmaWVkIiwiX3NwZWVkb21ldGVyIiwic2FtcGxlc0NvdW50IiwiYnl0ZXMiLCJ0aW1lc3RhbXBzIiwiZmlyc3RTYW1wbGVUUyIsImhlYWQiLCJ0YWlsIiwiY2h1bmtMZW5ndGgiLCJzdGFydGVkQXQiLCJieXRlc0NvdW50IiwicGFzc2VkIiwicm91bmQiLCJzcGVlZG9tZXRlciIsImxvYWRlZCIsInRvdGFsIiwibGVuZ3RoQ29tcHV0YWJsZSIsInByb2dyZXNzQnl0ZXMiLCJyYXRlIiwicHJvZ3Jlc3MiLCJlc3RpbWF0ZWQiLCJrbm93bkFkYXB0ZXJzIiwiaHR0cCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwib25DYW5jZWxlZCIsImNhbmNlbFRva2VuIiwidW5zdWJzY3JpYmUiLCJzaWduYWwiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ1bmVzY2FwZSIsImJ0b2EiLCJmdWxsUGF0aCIsIm9ubG9hZGVuZCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsIkVSUl9CQURfUkVRVUVTVCIsImZsb29yIiwic2V0dGxlIiwiZXJyIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9wZW4iLCJwYXJhbXNTZXJpYWxpemVyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwic2V0VGltZW91dCIsIm9uYWJvcnQiLCJFQ09OTkFCT1JURUQiLCJvbmVycm9yIiwiRVJSX05FVFdPUksiLCJvbnRpbWVvdXQiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwiRVRJTUVET1VUIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWwiLCJhYm9ydCIsInN1YnNjcmliZSIsImFib3J0ZWQiLCJwYXJzZVByb3RvY29sIiwic2VuZCIsImFkYXB0ZXJzIiwiZ2V0QWRhcHRlciIsIm5hbWVPckFkYXB0ZXIiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsImRpc3BhdGNoUmVxdWVzdCIsInJlYXNvbiIsImhlYWRlcnNUb09iamVjdCIsIm1lcmdlQ29uZmlnIiwiY29uZmlnMSIsImNvbmZpZzIiLCJnZXRNZXJnZWRWYWx1ZSIsIm1lcmdlRGVlcFByb3BlcnRpZXMiLCJ2YWx1ZUZyb21Db25maWcyIiwiZGVmYXVsdFRvQ29uZmlnMiIsIm1lcmdlRGlyZWN0S2V5cyIsIm1lcmdlTWFwIiwidGltZW91dE1lc3NhZ2UiLCJkZWNvbXByZXNzIiwiYmVmb3JlUmVkaXJlY3QiLCJ0cmFuc3BvcnQiLCJodHRwQWdlbnQiLCJodHRwc0FnZW50Iiwic29ja2V0UGF0aCIsInJlc3BvbnNlRW5jb2RpbmciLCJjb25maWdWYWx1ZSIsInZhbGlkYXRvcnMkMSIsImRlcHJlY2F0ZWRXYXJuaW5ncyIsInZhbGlkYXRvciIsInZlcnNpb24iLCJmb3JtYXRNZXNzYWdlIiwib3B0IiwiZGVzYyIsIm9wdHMiLCJFUlJfREVQUkVDQVRFRCIsIndhcm4iLCJhc3NlcnRPcHRpb25zIiwic2NoZW1hIiwiYWxsb3dVbmtub3duIiwiRVJSX0JBRF9PUFRJT05fVkFMVUUiLCJFUlJfQkFEX09QVElPTiIsInZhbGlkYXRvcnMiLCJBeGlvcyIsImluc3RhbmNlQ29uZmlnIiwiaW50ZXJjZXB0b3JzIiwiY29uZmlnT3JVcmwiLCJjb250ZXh0SGVhZGVycyIsImJvb2xlYW4iLCJmdW5jdGlvbiIsInJlcXVlc3RJbnRlcmNlcHRvckNoYWluIiwic3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJ1bnNoaWZ0IiwicmVzcG9uc2VJbnRlcmNlcHRvckNoYWluIiwicHJvbWlzZSIsImNoYWluIiwibmV3Q29uZmlnIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiZ2V0VXJpIiwiZ2VuZXJhdGVIVFRQTWV0aG9kIiwiaXNGb3JtIiwiQXhpb3MkMSIsIkNhbmNlbFRva2VuIiwiZXhlY3V0b3IiLCJyZXNvbHZlUHJvbWlzZSIsIl9saXN0ZW5lcnMiLCJvbmZ1bGZpbGxlZCIsIl9yZXNvbHZlIiwic3BsaWNlIiwiYyIsIkNhbmNlbFRva2VuJDEiLCJIdHRwU3RhdHVzQ29kZSIsIkNvbnRpbnVlIiwiU3dpdGNoaW5nUHJvdG9jb2xzIiwiUHJvY2Vzc2luZyIsIkVhcmx5SGludHMiLCJPayIsIkNyZWF0ZWQiLCJBY2NlcHRlZCIsIk5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbiIsIk5vQ29udGVudCIsIlJlc2V0Q29udGVudCIsIlBhcnRpYWxDb250ZW50IiwiTXVsdGlTdGF0dXMiLCJBbHJlYWR5UmVwb3J0ZWQiLCJJbVVzZWQiLCJNdWx0aXBsZUNob2ljZXMiLCJNb3ZlZFBlcm1hbmVudGx5IiwiRm91bmQiLCJTZWVPdGhlciIsIk5vdE1vZGlmaWVkIiwiVXNlUHJveHkiLCJVbnVzZWQiLCJUZW1wb3JhcnlSZWRpcmVjdCIsIlBlcm1hbmVudFJlZGlyZWN0IiwiQmFkUmVxdWVzdCIsIlVuYXV0aG9yaXplZCIsIlBheW1lbnRSZXF1aXJlZCIsIkZvcmJpZGRlbiIsIk5vdEZvdW5kIiwiTWV0aG9kTm90QWxsb3dlZCIsIk5vdEFjY2VwdGFibGUiLCJQcm94eUF1dGhlbnRpY2F0aW9uUmVxdWlyZWQiLCJSZXF1ZXN0VGltZW91dCIsIkNvbmZsaWN0IiwiR29uZSIsIkxlbmd0aFJlcXVpcmVkIiwiUHJlY29uZGl0aW9uRmFpbGVkIiwiUGF5bG9hZFRvb0xhcmdlIiwiVXJpVG9vTG9uZyIsIlVuc3VwcG9ydGVkTWVkaWFUeXBlIiwiUmFuZ2VOb3RTYXRpc2ZpYWJsZSIsIkV4cGVjdGF0aW9uRmFpbGVkIiwiSW1BVGVhcG90IiwiTWlzZGlyZWN0ZWRSZXF1ZXN0IiwiVW5wcm9jZXNzYWJsZUVudGl0eSIsIkxvY2tlZCIsIkZhaWxlZERlcGVuZGVuY3kiLCJUb29FYXJseSIsIlVwZ3JhZGVSZXF1aXJlZCIsIlByZWNvbmRpdGlvblJlcXVpcmVkIiwiVG9vTWFueVJlcXVlc3RzIiwiUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlIiwiVW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnMiLCJJbnRlcm5hbFNlcnZlckVycm9yIiwiTm90SW1wbGVtZW50ZWQiLCJCYWRHYXRld2F5IiwiU2VydmljZVVuYXZhaWxhYmxlIiwiR2F0ZXdheVRpbWVvdXQiLCJIdHRwVmVyc2lvbk5vdFN1cHBvcnRlZCIsIlZhcmlhbnRBbHNvTmVnb3RpYXRlcyIsIkluc3VmZmljaWVudFN0b3JhZ2UiLCJMb29wRGV0ZWN0ZWQiLCJOb3RFeHRlbmRlZCIsIk5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkIiwiSHR0cFN0YXR1c0NvZGUkMSIsImF4aW9zIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiaW5zdGFuY2UiLCJWRVJTSU9OIiwiQ2FuY2VsIiwiYWxsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJjYWxsYmFjayIsImlzQXhpb3NFcnJvciIsInBheWxvYWQiLCJmb3JtVG9KU09OIiwiZGVmYXVsdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiRnVuY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9